<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Web Snippets</title>
  
  <subtitle>code，food，english，history</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://ywxgod.github.io/blog/"/>
  <updated>2020-01-16T17:29:48.493Z</updated>
  <id>https://ywxgod.github.io/blog/</id>
  
  <author>
    <name>wyin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Excel中的数据输入</title>
    <link href="https://ywxgod.github.io/blog/2020/01/17/excel/data_input/"/>
    <id>https://ywxgod.github.io/blog/2020/01/17/excel/data_input/</id>
    <published>2020-01-16T17:25:06.523Z</published>
    <updated>2020-01-16T17:29:48.493Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Excel高效录入数据的4个诀窍"><a href="#Excel高效录入数据的4个诀窍" class="headerlink" title="Excel高效录入数据的4个诀窍"></a>Excel高效录入数据的4个诀窍</h2><ol><li><p><strong>快速输入当前日期和时间</strong></p><p>按<code>Ctrl+;</code>可以自动输入当前日期；按<code>Ctrl+Shift+；</code>可以自动输入当前时间</p><p>输入日期的格式：年/月/日，如：2020/1/16。注意：这里的月/日可能是一位数字，如果要将月/日变成相同的长度，可以用数字格式处理。</p><p>输入的时间格式：时:分，如：23:46。注意：这里时/分长度一样可能是一位数字。</p></li><li><p><strong>批量输入相同内容</strong></p><p>当需要在多个单元格输入相同的内容时，可以先选中这些单元格（如何快速选中这些单元格，请看下一条），然后输入内容，此时只会显示在一个单元格中，输入结束时只需按<code>Ctrl+Enter</code>，即可以自动用输入的内容填充所选中的所有单元格</p><p><img src="/blog/css/images/批量输入内容.gif" alt=""></p></li><li><p><strong>批量选中数据区域</strong></p><p>批量选中单元格时，一般会用到<code>Ctrl</code>和<code>Shift</code>两个键。当然不用按键，你可以直接用鼠标拖动选择也可以选中多个单元格。<code>Ctrl</code>主要用于选中多个不相邻的单元格；<code>Shift</code>用于选中多个连续的单元格</p><p>还可以通过筛选和定位功能选取某一列需要的单元格，然后再批量选中，进行批量操作。</p></li><li><p><strong>减少鼠标和键盘间的来回切换</strong></p><p>除了可以通过上下左右箭头键来选中移动单元格选中之外，我们还可以用<code>tab</code>键或者<code>shift+tab</code>键来移动单元格选中。<code>tab</code>是向右移动，<code>shift+tab</code>则会向左移动。</p></li></ol><h2 id="批量生成数字序列的3种方法"><a href="#批量生成数字序列的3种方法" class="headerlink" title="批量生成数字序列的3种方法"></a>批量生成数字序列的3种方法</h2><ol><li><p><strong>拖拽：拖动鼠标到哪里就填充到哪里</strong></p><p>选中单元格后，右下角会有一个小方块，称为<code>填充柄</code>，只要拖动<code>填充柄</code>就可以快速填充连续的数字。这里填充的序列根据你输入在单元格中的内容来决定：如果只输入了一个单元格，且从第一个单元格拖动<code>填充柄</code>，则会复制第一个单元格的内容到其他单元格。</p></li><li><p><strong>双击：自动填充到最后一行</strong></p><p>当选中单元格相邻列有数据时，双击选中单元格的<code>填充柄</code>会自动填充到与相邻列相同的行。</p><p><img src="/blog/css/images/双击填充.gif" alt=""></p></li><li><p><strong>按指定条件自动生成序列</strong></p><p>当需要填充的数据较多，且明确开始和结束数值时，可以用序列填充面板，如下图：</p><p><img src="/blog/css/images/自动填充序列.png" alt=""></p></li></ol><h2 id="4种特殊数据的输入方法"><a href="#4种特殊数据的输入方法" class="headerlink" title="4种特殊数据的输入方法"></a>4种特殊数据的输入方法</h2><ol><li><p><strong>数字前面输入0</strong></p><p>a. 在输入数据前，先输入英文单引号，然后再在单引号后面输入0即可。</p><p>b. 还可以设置单元格格式为文本，这样也可以输入0</p></li><li><p><strong>输入身份证号，银行账号</strong></p><p>当输入身份证，银行账号时，excel会认为是长数字，它会自动转为科学计数法显示数字。所以只要我们将单元格格式设置为文本即可。</p></li><li><p><strong>输入标准日期</strong></p><p>excel中的日期为特殊的数字，可以进行数学计算。且标准的日期格式是斜杠隔开的年月日，如：2020/1/17</p></li><li><p><strong>输入特殊符号</strong></p><p>a. 可以通过 <code>插入</code> - <code>符号</code> 菜单插入特殊符号。</p><p>b. 直接通过输入法提供的特殊字符面板输入，如：搜狗输入法</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Excel高效录入数据的4个诀窍&quot;&gt;&lt;a href=&quot;#Excel高效录入数据的4个诀窍&quot; class=&quot;headerlink&quot; title=&quot;Excel高效录入数据的4个诀窍&quot;&gt;&lt;/a&gt;Excel高效录入数据的4个诀窍&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;stro
      
    
    </summary>
    
      <category term="excel" scheme="https://ywxgod.github.io/blog/categories/excel/"/>
    
    
      <category term="数据输入" scheme="https://ywxgod.github.io/blog/tags/%E6%95%B0%E6%8D%AE%E8%BE%93%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>背景图定位</title>
    <link href="https://ywxgod.github.io/blog/2019/11/22/css/bg_position/"/>
    <id>https://ywxgod.github.io/blog/2019/11/22/css/bg_position/</id>
    <published>2019-11-21T16:20:30.042Z</published>
    <updated>2019-11-21T16:21:24.277Z</updated>
    
    <content type="html"><![CDATA[<p>定位背景图的三种方法：</p><h3 id="background-position"><a href="#background-position" class="headerlink" title="background-position"></a>background-position</h3><p>background-position可以直接定位背景图到指定的位置，如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 距离容器右边距20px， 下边距30px */</span></span><br><span class="line"><span class="selector-tag">background-position</span>: <span class="selector-tag">right</span> 20<span class="selector-tag">px</span> <span class="selector-tag">bottom</span> 30<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p>这种方法是css3新增语法，在不支持的浏览器上需要做回退处理，可以添加如下声明：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 只能指定容器的 */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">url</span>(<span class="selector-tag">test</span><span class="selector-class">.png</span>) <span class="selector-tag">no-repeat</span> <span class="selector-tag">bottom</span> <span class="selector-tag">right</span> <span class="selector-tag">red</span>;</span><br><span class="line"><span class="selector-tag">background-position</span>: <span class="selector-tag">right</span> 20<span class="selector-tag">px</span> <span class="selector-tag">bottom</span> 30<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><h3 id="background-origin"><a href="#background-origin" class="headerlink" title="background-origin"></a>background-origin</h3><p>background-origin可以指定背景图相对于容器的区域，一般有三个值：content-box，padding-box，border-box，默认值是padding-box，所以默认情况下背景图不会覆盖容器的边框</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 设置padding值为10px */</span></span><br><span class="line"><span class="selector-tag">padding</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line"><span class="comment">/** 将背景图设置到右下角 */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">url</span>(<span class="selector-tag">test</span><span class="selector-class">.png</span>) <span class="selector-tag">no-repeat</span> <span class="selector-tag">bottom</span> <span class="selector-tag">right</span> <span class="selector-tag">red</span>; </span><br><span class="line"><span class="comment">/** 设置背景图区域为content-box，因为padding为10px，所以背景图会相对于右下角各10px */</span></span><br><span class="line"><span class="selector-tag">background-origin</span>: <span class="selector-tag">content-box</span>;</span><br></pre></td></tr></table></figure><h3 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">url</span>(<span class="selector-tag">test</span><span class="selector-class">.png</span>) <span class="selector-tag">no-repeat</span>;</span><br><span class="line"><span class="selector-tag">background-position</span>: <span class="selector-tag">calc</span>(100% <span class="selector-tag">-</span> 10<span class="selector-tag">px</span>) <span class="selector-tag">calc</span>(100% <span class="selector-tag">-</span> 10<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure><p>100% - xpx : x表示距离边界的距离。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;定位背景图的三种方法：&lt;/p&gt;
&lt;h3 id=&quot;background-position&quot;&gt;&lt;a href=&quot;#background-position&quot; class=&quot;headerlink&quot; title=&quot;background-position&quot;&gt;&lt;/a&gt;background
      
    
    </summary>
    
      <category term="css" scheme="https://ywxgod.github.io/blog/categories/css/"/>
    
    
      <category term="code" scheme="https://ywxgod.github.io/blog/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>用open函数读取文本文件内容</title>
    <link href="https://ywxgod.github.io/blog/2019/11/22/python/read_txt_file/"/>
    <id>https://ywxgod.github.io/blog/2019/11/22/python/read_txt_file/</id>
    <published>2019-11-21T16:15:11.195Z</published>
    <updated>2019-11-21T16:19:24.291Z</updated>
    
    <content type="html"><![CDATA[<p>用<code>open(‘text.txt’, ‘r’).read()</code>读取文本文件时，经常会出现解码错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UnicodeDecodeError: <span class="string">'gbk'</span> codec can<span class="string">'t decode byte 0x99 in position 540: illegal multibyte sequence</span></span><br></pre></td></tr></table></figure><p>这是因为我们大部分IDE创建文件文本文件时用的编码跟python读取文件时使用的编码不同导致的。解决上面的错误，我们可以加一个模式：<code>b</code>，这样告诉python读取文件的原始数据而不进行编码，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file = open(filename, <span class="string">'rb'</span>)</span><br></pre></td></tr></table></figure><p>然后调用read方法读取文件内容，此时read方法返回的内容为二进制数据，并非字符串</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text = file.read()</span><br></pre></td></tr></table></figure><p>接下来可以根据需要将二进制转换为我们存储文件时的编码，如utf-8：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text = text.decode(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure><p>这样text保存的即为字符串的文本内容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用&lt;code&gt;open(‘text.txt’, ‘r’).read()&lt;/code&gt;读取文本文件时，经常会出现解码错误：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa
      
    
    </summary>
    
      <category term="python" scheme="https://ywxgod.github.io/blog/categories/python/"/>
    
    
      <category term="code" scheme="https://ywxgod.github.io/blog/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>如何强制vue组件重新渲染</title>
    <link href="https://ywxgod.github.io/blog/2019/11/12/vuejs/rerender_in_vuejs/"/>
    <id>https://ywxgod.github.io/blog/2019/11/12/vuejs/rerender_in_vuejs/</id>
    <published>2019-11-11T17:20:00.009Z</published>
    <updated>2019-11-11T17:21:53.359Z</updated>
    
    <content type="html"><![CDATA[<p>原文请看这里： <a href="https://michaelnthiessen.com/force-re-render/" target="_blank" rel="noopener">https://michaelnthiessen.com/force-re-render/</a> </p><p>有些时候vue的响应机制并不起作用（注：<a href="https://cn.vuejs.org/v2/guide/list.html#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" target="_blank" rel="noopener">vue官网文档 注意事项</a>），这个时候我们需要强制vue组件重新渲染，也或许你可以删掉当前的组件重新创建一个新组件。所以，如何才能正确地让组件重新渲染？</p><p><strong>最好的方法是给组件设置 <code>:key</code> ，当你需要组件重新渲染时，只需要更改key的值。</strong></p><a id="more"></a><p>除了用key外，用的比较多的还有另外两种方法：</p><ol><li>用v-if</li><li>用组件的<code>forceUpdate</code>方法</li></ol><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><p>如我们将renderComponent赋值给v-if指令：</p><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-if</span>=<span class="string">"renderComponent"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> MyComponent <span class="keyword">from</span> <span class="string">'./MyComponent.vue'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">components: &#123; MyComponent &#125;,</span></span><br><span class="line"><span class="undefined">data() &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">renderComponent: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">methods: &#123;</span></span><br><span class="line"><span class="undefined">forceRerender()&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">this</span>.renderComponent = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">this</span>.$nextTick().then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">this</span>.renderComponent = <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">mounted()&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">this</span>.forceRerender();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MyComponent.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Child Component<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">mounted()&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.console.log(<span class="string">'mounted'</span>);</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">beforeDestroy()&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.console.log(<span class="string">'before destroied'</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用vue cli3的快速原型方法build，你会看到控制台输出如下：</p><figure class="highlight plain"><figcaption><span>wiki</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mounted</span><br><span class="line">before destroied</span><br><span class="line">mounted</span><br></pre></td></tr></table></figure><p>第一个是正常mount，后面的<code>before destroied</code>，然后又<code>mounted</code>是因为我们改变了<code>renderComponent</code>。所以v-if会让组件重新开始一个生命周期。</p><p>关于nextTick：一个tick是指DOM的一个更新周期。vue会在一个周期内收集所有更新，到周期结束时vue会根据收集的更新来重新渲染DOM。上面的代码，如果我们不等到下一个tick就更新renderComponent，实际上只是将renderComponent的值还原了，因为在周期的末尾vue会认为renderComponent的值没有改变，而不会重新渲染MyComponent。</p><p><code>In Vue, a tick is a single DOM update cycle. Vue will collect all updates made in the same tick, and at the end of a tick it will update what is rendered into the DOM based on these updates. If we don&#39;t wait until the next tick, our updates to renderComponent will just cancel themselves out, and nothing will change.</code></p><h2 id="forceUpdate"><a href="#forceUpdate" class="headerlink" title="forceUpdate"></a>forceUpdate</h2><p>正常情况下，改变数据vue重新渲染组件。<strong>但当你调用<code>forceUpdate</code>时，即时没有数据改变，组件也会重新渲染。</strong></p><p>如果改变数据，vue会自动重新渲染，那我们为什么需要强制重新渲染？</p><p>当然大部分时候是不需要我们强制组件重新渲染的。只是在某些情况下vue的响应式机制会无法处理，具体哪些情况可以参考：<a href="https://cn.vuejs.org/v2/guide/list.html#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" target="_blank" rel="noopener">注意事项</a></p><p>我们修改MyComponent.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">Child Component</span><br><span class="line">&#123;&#123;numbers.toString()&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">data()&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">numbers:[1,2,3]</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">mounted()&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.console.log(<span class="string">'mounted'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">this</span>.numbers[<span class="keyword">this</span>.numbers.length] = <span class="number">4</span>; <span class="comment">// (A)</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">this</span>.$forceUpdate();</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">beforeDestroy()&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.console.log(<span class="string">'before destroyed'</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过直接给数组索引位置赋值，是不会触发vue自动渲染的。所以后面我们可以调用<code>forceUpdate</code>方法重新渲染组件。这种方法一般不会用到，如果你的代码中用到了这样的更新数据方法，那就需要检查你的代码了。</p><p>还有就是<code>forceUpdate</code>方法只会重新调用组件的render方法，不会销毁组件重新渲染。就是说只是重新跑了一次组件更新流程，其他的生命周期钩子不会重新执行。<a href="https://github.com/vuejs/vue/issues/7395" target="_blank" rel="noopener">这里有尤大的原话</a></p><p><code>$forceUpdate only force the view to re-render, not the computed properties. Your computed property should not contain an external non-reactive variable (time), which makes it impure.</code></p><h2 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h2><p>key的作用主要是让vue知道某个组件是由某块数据渲染的，让数据跟对应的组件有种唯一的对应关系。通过key，vue可以知道哪些数据变了，哪些没有变。如果key不变，vue将不会重新渲染组件；如果key改变了，vue会销毁旧的组件重新创建一个。</p><p>先来说说vue里面为什么需要key。</p><p>假如我们要渲染以下数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'Evan'</span>, <span class="attr">age</span>: <span class="number">34</span> &#125;,</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'Sarah'</span>, <span class="attr">age</span>: <span class="number">98</span> &#125;,</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'James'</span>, <span class="attr">age</span>: <span class="number">45</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>我们用数组索引作为key，具体如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(person, index) in people"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">    &#123;&#123; person.name &#125;&#125; - &#123;&#123; index &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// Outputs</span><br><span class="line">Evan - 0</span><br><span class="line">Sarah - 1</span><br><span class="line">James - 2</span><br></pre></td></tr></table></figure><p>现在假如我们删除Sarah，输出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Evan - <span class="number">0</span></span><br><span class="line">James - <span class="number">1</span></span><br></pre></td></tr></table></figure><p>vue会发现key为0的Evan没变，key为1的原来是Sarah，现在是James，所以认为key为1处的数据变了，vue会重新渲染James，然而James实际是没有改变的，这误导了vue。实际上当Sarah被删除时，vue会删除Sarah和James各自对应的组件，然后重新创建一个James对应的组件。</p><p>所以某些时候用index作为key是有问题的，我们需要一个唯一的键值（通常是id）来表示key。接下来修改代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">'this-is-an-id'</span>, <span class="attr">name</span>: <span class="string">'Evan'</span>, <span class="attr">age</span>: <span class="number">34</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">'unique-id'</span>, <span class="attr">name</span>: <span class="string">'Sarah'</span>, <span class="attr">age</span>: <span class="number">98</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">'another-unique-id'</span>, <span class="attr">name</span>: <span class="string">'James'</span>, <span class="attr">age</span>: <span class="number">45</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-<span class="keyword">for</span>=<span class="string">"person in people"</span> :key=<span class="string">"person.id"</span>&gt;</span><br><span class="line">    &#123;&#123; person.name &#125;&#125; - &#123;&#123; person.id &#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure><p>现在vue通过不同的id关联两个不同的组件，当你删除一个时，vue会删除对于的组件，而不会影响到其他。如果我们增加一项数据到数组，同样不会影响其他组件，vue会根据所增加的数据创建一个新的组件与之关联，并将其插入正确的地方。</p><p>最好我们修改App.vue的代码，改为key的方式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:key</span>=<span class="string">"componentKey"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> MyComponent <span class="keyword">from</span> <span class="string">'./MyComponent.vue'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">components: &#123; MyComponent &#125;,</span></span><br><span class="line"><span class="undefined">data() &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">componentKey: 0</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">methods: &#123;</span></span><br><span class="line"><span class="undefined">forceRerender()&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">this</span>.componentKey += <span class="number">1</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">mounted()&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">this</span>.forceRerender();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>请记住，如果你发现你需要强制重新渲染一个组件，那么可能你的实现不是最好的方法。如果确实需要强制重新渲染组件，那就选择用<code>key</code>的方式。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文请看这里： &lt;a href=&quot;https://michaelnthiessen.com/force-re-render/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://michaelnthiessen.com/force-re-render/&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;有些时候vue的响应机制并不起作用（注：&lt;a href=&quot;https://cn.vuejs.org/v2/guide/list.html#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue官网文档 注意事项&lt;/a&gt;），这个时候我们需要强制vue组件重新渲染，也或许你可以删掉当前的组件重新创建一个新组件。所以，如何才能正确地让组件重新渲染？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最好的方法是给组件设置 &lt;code&gt;:key&lt;/code&gt; ，当你需要组件重新渲染时，只需要更改key的值。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="code" scheme="https://ywxgod.github.io/blog/categories/code/"/>
    
    
      <category term="vuejs" scheme="https://ywxgod.github.io/blog/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>分组网络的时延类型</title>
    <link href="https://ywxgod.github.io/blog/2019/11/11/cs/network_delay/"/>
    <id>https://ywxgod.github.io/blog/2019/11/11/cs/network_delay/</id>
    <published>2019-11-11T15:02:30.054Z</published>
    <updated>2019-11-11T15:04:11.493Z</updated>
    
    <content type="html"><![CDATA[<p>以一个分组从上游路由器通过路由器A向路由器B发送为例，我们在A路由器处会考虑各种时延：处理时延，排队时延，运输时延，传播时延。</p><p>当分组从上游节点到达A时，路由器A检查该分组的首部以决定它的适当出口链路，并将该分组导向该链路，这里是通向B的那条。仅当在该链路没有其他分组正在传输并且没有排队时，才能在该条链路上传输该分组。如果该条链路正繁忙或者有其他分组正在排队，那新到达的分组将会加入排队。</p><a id="more"></a><h2 id="处理时延（processing-delays）"><a href="#处理时延（processing-delays）" class="headerlink" title="处理时延（processing delays）"></a>处理时延（processing delays）</h2><p><strong>检查分组首部和决定该分组导向何处所需的时间，它包括：检查比特级别的差错等。</strong>高速路由器的<code>处理时延通常是微秒或更低的数量级</code>。如上面的例子，分组被处理后，路由器将此分组导向通往B路由器链路之前的<strong>队列</strong>。</p><h2 id="排队时延（queuing-delays）"><a href="#排队时延（queuing-delays）" class="headerlink" title="排队时延（queuing delays）"></a>排队时延（queuing delays）</h2><p>分组到达某出口链路队列后，如果该链路繁忙或者已经有分组在该链路上传输，它需要经受排队时延，就是说排队时延是不固定的，有时有有时无。排队时延的长短取决于先期到达的正在排队等待向链路传输的分组数量。如果该队列为空，排队时延为0；如果链路流量很大，排队时延或许很长。<code>实际的排队时延是毫秒到微秒的量级</code>。</p><h2 id="运输时延（transmission-delays）"><a href="#运输时延（transmission-delays）" class="headerlink" title="运输时延（transmission delays）"></a>运输时延（transmission delays）</h2><p>路由器推出分组所需要的时间，它是分组长度和链路传输速度的函数，它与路由器之间的距离无关。例如，对于一条10Mbps的以太网链路，速率是10Mbps，分组长度为L，则运输时延为L/10，这就是将所有分组的比特推向链路所需要的时间。<code>实际的运输时延通常在毫秒到微秒量级</code>。</p><h2 id="传播时延（propagation-delays）"><a href="#传播时延（propagation-delays）" class="headerlink" title="传播时延（propagation delays）"></a>传播时延（propagation delays）</h2><p>分组两个路由之间传播的时间称为传播时延，为两个路由器之间的距离除以传播速率。<code>广域网中传播时延为毫秒量级</code>。</p><p>以上四种时延，除了排队时延不固定，其他时延都是固定存在的。</p><p>假设d~proc~，d~queue~，d~trans~，d~prop~分别表示处理时延、排队时延、传输时延、传播时延，</p><p>则节点的总时延为：<br>$$<br><strong>d~nodal~ = d~proc~ + d~queue~ + d~trans~ + d~prop~</strong><br>$$</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以一个分组从上游路由器通过路由器A向路由器B发送为例，我们在A路由器处会考虑各种时延：处理时延，排队时延，运输时延，传播时延。&lt;/p&gt;
&lt;p&gt;当分组从上游节点到达A时，路由器A检查该分组的首部以决定它的适当出口链路，并将该分组导向该链路，这里是通向B的那条。仅当在该链路没有其他分组正在传输并且没有排队时，才能在该条链路上传输该分组。如果该条链路正繁忙或者有其他分组正在排队，那新到达的分组将会加入排队。&lt;/p&gt;
    
    </summary>
    
      <category term="计算机网络" scheme="https://ywxgod.github.io/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="时延" scheme="https://ywxgod.github.io/blog/tags/%E6%97%B6%E5%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>从零开始学虚拟DOM</title>
    <link href="https://ywxgod.github.io/blog/2019/11/09/jsinfo/virtual_dom/"/>
    <id>https://ywxgod.github.io/blog/2019/11/09/jsinfo/virtual_dom/</id>
    <published>2019-11-08T19:13:36.197Z</published>
    <updated>2019-11-08T19:33:42.435Z</updated>
    
    <content type="html"><![CDATA[<p>此文主要翻译自：<a href="https://dev.to/ycmjason/building-a-simple-virtual-dom-from-scratch-3d05" target="_blank" rel="noopener">Building a Simple Virtual DOM from Scratch</a>，看原文的同学请直达！</p><p>此文是作者在一次现场编程演讲时现场所做的，有关演讲的相关资料我们也可以在原英文链接找到。</p><h2 id="背景：什么是虚拟DOM"><a href="#背景：什么是虚拟DOM" class="headerlink" title="背景：什么是虚拟DOM"></a>背景：什么是虚拟DOM</h2><p>虚拟DOM指的是用于展现真实DOM的普通JS对象。简单说就是JS的普通对象，通过这个对象可以创建真实的DOM，它保存了创建真实DOM所需的所有东西。<a id="more"></a></p><p>Virtual DOMs usually refer to plain objects representing the actual DOMs.</p><blockquote><p>   The Document Object Model (DOM) is a programming interface for HTML documents. </p></blockquote><p>比如，我们这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $app = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>);</span><br></pre></td></tr></table></figure><p>浏览器会创建DOM：<div id="app"></div> , DOM也是一种对象，它提供了自己的接口，我们可以通过JS控制DOM，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$app.innerHTML = <span class="string">'Hello world'</span>;</span><br></pre></td></tr></table></figure><p>如果用一个对象来描述上面创建的真实DOM 我们可以像下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vApp = &#123;</span><br><span class="line">    tagName: <span class="string">'div'</span>,</span><br><span class="line">    attrs: &#123;</span><br><span class="line">        id: <span class="string">'app'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于虚拟DOM，还没有任何严格的规则要求要怎么创建，或者说创建的对象要遵守什么编程接口，规则等。例如上面的例子，你可以用<strong>tagLabel</strong>替代<strong>tagName</strong>，或者<strong>props</strong>替代<strong>attrs</strong>。只要它能创建一个真实的DOM，那它可以认为是一个虚拟DOM。</p><blockquote><p>  译者注：vue.js与react.js都使用了虚拟DOM，但他们的实现不一样</p></blockquote><p>虚拟DOM不像真实的DOM，它没有提供编程接口，就是普通对象。所以跟真实的DOM相比，它更加轻量。</p><p>虽然虚拟DOM更加轻量，但真实DOM才是浏览器最基础的元素，大部分浏览器都对DOM的相关操作都做了大量的优化，所以真实的DOM操作可能不是像很多人说的那样慢的。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>   <a href="https://codesandbox.io/s/7wqm7pv476?expanddevtools=1" target="_blank" rel="noopener">https://codesandbox.io/s/7wqm7pv476?expanddevtools=1</a> </p></blockquote><p>我们先用mkdir创建一个项目目录，然后用cd进入刚创建的目录，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir /tmp/vdommm</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /tmp/vdommm</span></span><br></pre></td></tr></table></figure><p>然后初始化一个git仓库，用gitignorer创建.gitignore文件，然后用npm初始化项目，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitignore init node</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm init -y</span></span><br></pre></td></tr></table></figure><blockquote><p>  译者注：gitignorer需要npm全局安装，没有安装的可以通过<code>npm instrall gitignorer -g</code>先安装。</p></blockquote><p>现在我们可以先进行初次提交，将现有代码提交到git仓库，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add -A</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -am <span class="string">':tada: initial commit'</span></span></span><br></pre></td></tr></table></figure><p>然后我们可以安装 <a href="https://parceljs.org/" target="_blank" rel="noopener">Parcel Bundler</a>（一个正在的零配置打包工具），它支持各种格式的开箱即用。在我做现场编码演讲时会经常用到它。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install parcel-bundler</span></span><br></pre></td></tr></table></figure><blockquote><p>  译者注：Parcel跟Webpack功能类似，上手也快。</p></blockquote><p>(有趣的是：安装的时候你不在需要 –save 参数), 趁安装parcel的时候，我们创建其他的文件，如下：</p><p><strong>src/index.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        Hello world</span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>src/main.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vApp = &#123;</span><br><span class="line">    tagName: <span class="string">'div'</span>,</span><br><span class="line">    attrs: &#123;</span><br><span class="line">        id: <span class="string">'app'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(vApp);</span><br></pre></td></tr></table></figure><p><strong>package.json</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "dev": "parcel src/index.html", // add this script</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建完上面的文件，我们可以直接执行下面的命令，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm run dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 如果成功会输出下面</span></span></span><br><span class="line">Server running at http://localhost:1234 </span><br><span class="line">√  Built in 1.26s.</span><br></pre></td></tr></table></figure><p>打开浏览器访问： <a href="http://localhost:1234/" target="_blank" rel="noopener">http://localhost:1234/</a> 你应该会看到 hello world字样，还有控制台会输出我们定义的虚拟DOM对象。如果一切如上，那么你的环境准备完毕。</p><h2 id="createElement"><a href="#createElement" class="headerlink" title="createElement"></a>createElement</h2><blockquote><p>   <a href="https://codesandbox.io/s/n9641jyo04?expanddevtools=1" target="_blank" rel="noopener">https://codesandbox.io/s/n9641jyo04?expanddevtools=1</a> </p></blockquote><p>大多的虚拟DOM实现都会有个叫<code>createElement</code>的方法，通常简称为 <strong>h</strong> 。这个函数只是简单地返回一个“虚拟元素”，下面让我们看看它的实现。</p><p><strong>src/vdom/createElement.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (tagName, opts) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        tagName,</span><br><span class="line">        attrs: opts.attrs,</span><br><span class="line">        children: opts.children</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>利用对象的析构功能，我们可以改写上面的代码，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (tagName, &#123;attrs, children&#125;) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        tagName,</span><br><span class="line">        attrs,</span><br><span class="line">        children</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当opts为空时，也应该可以创建虚拟元素，所以继续修改代码，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (tagName, &#123;attrs=&#123;&#125;, children=[]&#125;=&#123;&#125;) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        tagName,</span><br><span class="line">        attrs,</span><br><span class="line">        children</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>  译者注：opts默认值为{}，attrs默认值为{}，children默认值为[]</p></blockquote><p>定义了createElement方法，我们现在可以改写main.js，让main.js调用createElement方法创建虚拟DOM，</p><p><strong>src/main.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> createElement <span class="keyword">from</span> <span class="string">"./vdom/createElement"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vApp = createElement(<span class="string">'div'</span>, &#123;</span><br><span class="line">    attrs: &#123;</span><br><span class="line">        id: <span class="string">'app'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">        createElement(<span class="string">'img'</span>, &#123;</span><br><span class="line">            attrs: &#123;</span><br><span class="line">                src: <span class="string">'https://media.giphy.com/media/cuPm4p4pClZVC/giphy.gif'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(vApp);</span><br></pre></td></tr></table></figure><p>修改后的main.js, 我们添加了一张来自giphy的图片。回到浏览器，刷新刚才的页面，你会看到控制台输出了新的虚拟DOM。</p><p>字面量对象（如：{a: 3}）会自动继承自Object。就是说我们的虚拟DOM对象会自动包含hasOwnProperty, toString等这些方法。我们可以用Object.create(null)创建对象，这样不会继承只Object，也可以让我们的虚拟DOM更加的“纯”。所以修改createElement方法如下：</p><p><strong>src/vdom/createElement.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (tagName, &#123;attrs=&#123;&#125;, children=[]&#125;=&#123;&#125;) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> vElem = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">    <span class="built_in">Object</span>.assign(vElem, &#123;</span><br><span class="line">        tagName,</span><br><span class="line">        attrs,</span><br><span class="line">        children</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> vElem;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="render-vNode"><a href="#render-vNode" class="headerlink" title="render(vNode)"></a>render(vNode)</h2><blockquote><p>   <a href="https://codesandbox.io/s/pp9wnl5nj0?expanddevtools=1" target="_blank" rel="noopener">https://codesandbox.io/s/pp9wnl5nj0?expanddevtools=1</a> </p></blockquote><h3 id="渲染虚拟元素"><a href="#渲染虚拟元素" class="headerlink" title="渲染虚拟元素"></a>渲染虚拟元素</h3><p>现在我们已经有了一个函数能创建虚拟DOM，下面一个方法将虚拟DOM翻译成真实的DOM。定义<code>render(vNode)</code>方法，如下：</p><p><strong>src/vdom/render.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> render = <span class="function"><span class="params">vNode</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> $el = <span class="built_in">document</span>.createElement(vNode.tagName);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> [k,v] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(vNode.attrs))&#123;</span><br><span class="line">        $el.setAttribute(k, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> child <span class="keyword">of</span> vNode.children)&#123;</span><br><span class="line">        $el.appendChild(render(child));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $el;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> render;</span><br></pre></td></tr></table></figure><p>上面的代码很简单，就不做过多解释了。</p><h2 id="ElementNode与TextNode"><a href="#ElementNode与TextNode" class="headerlink" title="ElementNode与TextNode"></a>ElementNode与TextNode</h2><p>对于真实的DOM，实际有<a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType" target="_blank" rel="noopener">8种类型的节点</a>，这里我们只看2种类型：</p><ol><li>ElementNode， 比如：<div>, <img></div></li><li>TextNode, 纯文本</li></ol><p>看我们上面创建的虚拟DOM对象 <code>{tagName, attrs, children}</code>，它只能创建真实DOM中的 ElementNode。因此，我们还需要增加能创建<code>TextNode</code>的功能。我们将用String来创建TextNode</p><p>为了好展示，让我们添加一些文本到虚拟DOM，如下：</p><p><strong>src/main.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> createElement <span class="keyword">from</span> <span class="string">"./vdom/createElement"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vApp = createElement(<span class="string">'div'</span>, &#123;</span><br><span class="line">    attrs: &#123;</span><br><span class="line">        id: <span class="string">'app'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">        <span class="string">'Hello world'</span>,</span><br><span class="line">        createElement(<span class="string">'img'</span>, &#123;</span><br><span class="line">            attrs: &#123;</span><br><span class="line">                src: <span class="string">'https://media.giphy.com/media/cuPm4p4pClZVC/giphy.gif'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(vApp);</span><br></pre></td></tr></table></figure><h3 id="扩展render函数以便支持文本节点-TextNode"><a href="#扩展render函数以便支持文本节点-TextNode" class="headerlink" title="扩展render函数以便支持文本节点(TextNode)"></a>扩展render函数以便支持文本节点(TextNode)</h3><p>想我上面提到的，我们需要考虑两种类型的DOM节点。当前的render方法只能渲染ElementNode。所以让我们扩展render方法以便支持渲染文本节点。</p><p>我们将原来的render方法改名为renderElem，同时修改一下参数，将原来的vNode析构为<code>{tagName, attrs, children}</code>，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> renderElem = (&#123;tagName, attrs, children&#125;) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> $el = document.createElement(tagName);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> [k,v] of Object.entries(attrs))&#123;</span><br><span class="line">        $el.setAttribute(k, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> child of children)&#123;</span><br><span class="line">        $el.appendChild(render(child));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $el;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> render;</span><br></pre></td></tr></table></figure><p>接下来，我们重新定义一个render函数。新的render函数只需要检查vNode是否是string类型，如果是就调用document.createTextNode(string)来渲染文本节点，否则调用上面定义的renderElem即可，如下：</p><p><strong>src/vdom/render.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> renderElem = <span class="function">(<span class="params">&#123;tagName, attrs, children&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> $el = <span class="built_in">document</span>.createElement(tagName);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> [k,v] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(attrs))&#123;</span><br><span class="line">        $el.setAttribute(k, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> child <span class="keyword">of</span> children)&#123;</span><br><span class="line">        $el.appendChild(render(child));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $el;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> render = <span class="function"><span class="params">vNode</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> vNode === <span class="string">'string'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.createTextNode(vNode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> renderElem(vNode);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> render;</span><br></pre></td></tr></table></figure><h3 id="渲染我们的vApp"><a href="#渲染我们的vApp" class="headerlink" title="渲染我们的vApp"></a>渲染我们的vApp</h3><p>现在让我们来渲染我们的vApp，并输出它！</p><p><strong>src/main.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> createElement <span class="keyword">from</span> <span class="string">"./vdom/createElement"</span>;</span><br><span class="line"><span class="keyword">import</span> render <span class="keyword">from</span> <span class="string">"./vdom/render"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vApp = createElement(<span class="string">'div'</span>, &#123;</span><br><span class="line">    attrs: &#123;</span><br><span class="line">        id: <span class="string">'app'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">        <span class="string">'Hello world'</span>,</span><br><span class="line">        createElement(<span class="string">'img'</span>, &#123;</span><br><span class="line">            attrs: &#123;</span><br><span class="line">                src: <span class="string">'https://media.giphy.com/media/cuPm4p4pClZVC/giphy.gif'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> $app = render(vApp);</span><br><span class="line"><span class="built_in">console</span>.log($app);</span><br></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    Hello world</span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://media.giphy.com/media/cuPm4p4pClZVC/giphy.gif"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="mount-node-target"><a href="#mount-node-target" class="headerlink" title="mount($node, $target)"></a>mount($node, $target)</h2><blockquote><p>   <a href="https://codesandbox.io/s/vjpk91op47" target="_blank" rel="noopener">https://codesandbox.io/s/vjpk91op47</a> </p></blockquote><p>现在我们已经可以创建虚拟DOM，并且能将它渲染成真实的DOM。接下来我们需要把真实的DOM显示在页面上。</p><p>首先，我们需要一个挂载点，我们将原页面上的hello world替换为一个div元素，如下：</p><p>src/index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来我们要做的是用$app替换掉空的div元素。如果不考虑IE与Safari这将非常容易，我们只要用ChildNode.replaceWith方法即可。</p><p>让我们定义render($node, $target)方法，它会将$target用$node替换掉，然后返回$node，如下：</p><p><strong>src/vdom/mount.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ($node, $target) =&gt; &#123;</span><br><span class="line">    $target.replaceWith($node);</span><br><span class="line">    <span class="keyword">return</span> $node;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在修改main.js，调用mount方法，如下：</p><p><strong>src/main.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> createElement <span class="keyword">from</span> <span class="string">"./vdom/createElement"</span>;</span><br><span class="line"><span class="keyword">import</span> render <span class="keyword">from</span> <span class="string">"./vdom/render"</span>;</span><br><span class="line"><span class="keyword">import</span> mount <span class="keyword">from</span> <span class="string">"./vdom/mount"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vApp = createElement(<span class="string">'div'</span>, &#123;</span><br><span class="line">    attrs: &#123;</span><br><span class="line">        id: <span class="string">'app'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">        <span class="string">'Hello world'</span>,</span><br><span class="line">        createElement(<span class="string">'img'</span>, &#123;</span><br><span class="line">            attrs: &#123;</span><br><span class="line">                src: <span class="string">'https://media.giphy.com/media/cuPm4p4pClZVC/giphy.gif'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> $app = render(vApp);</span><br><span class="line"><span class="keyword">const</span> $target = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>);</span><br><span class="line">mount($app, $target);</span><br></pre></td></tr></table></figure><h2 id="让我们的app再有趣一点"><a href="#让我们的app再有趣一点" class="headerlink" title="让我们的app再有趣一点"></a>让我们的app再有趣一点</h2><blockquote><p>   <a href="https://codesandbox.io/s/ox02294zo5" target="_blank" rel="noopener">https://codesandbox.io/s/ox02294zo5</a> </p></blockquote><p>接下来让我们的app变得有趣一点。我们用函数<code>createVApp</code>来创建vApp，createVApp接收一个<code>count</code>参数，用于创建vApp。如下：</p><p><strong>src/main.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> createElement <span class="keyword">from</span> <span class="string">"./vdom/createElement"</span>;</span><br><span class="line"><span class="keyword">import</span> render <span class="keyword">from</span> <span class="string">"./vdom/render"</span>;</span><br><span class="line"><span class="keyword">import</span> mount <span class="keyword">from</span> <span class="string">"./vdom/mount"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createVApp = <span class="function"><span class="params">count</span> =&gt;</span> createElement(<span class="string">'div'</span>, &#123;</span><br><span class="line">    attrs: &#123;</span><br><span class="line">        id: <span class="string">'app'</span>,</span><br><span class="line">        dataCount: count</span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">        <span class="string">'The current count is: '</span>,</span><br><span class="line">        <span class="built_in">String</span>(count),</span><br><span class="line">        createElement(<span class="string">'img'</span>, &#123;</span><br><span class="line">            attrs: &#123;</span><br><span class="line">                src: <span class="string">'https://media.giphy.com/media/cuPm4p4pClZVC/giphy.gif'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> vApp = createVApp(count);</span><br><span class="line"><span class="keyword">const</span> $app = render(vApp);</span><br><span class="line"><span class="keyword">const</span> $target = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>);</span><br><span class="line"><span class="keyword">let</span> $rootEl = mount($app, $target);</span><br><span class="line"></span><br><span class="line">setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    count++;</span><br><span class="line">    $rootEl = mount(render(createVApp(count)), $rootEl);</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// function start(count)&#123;</span></span><br><span class="line"><span class="comment">//     let vApp = createVApp(count);</span></span><br><span class="line"><span class="comment">//     const $app = render(vApp);</span></span><br><span class="line"><span class="comment">//     const $target = document.getElementById('app');</span></span><br><span class="line"><span class="comment">//     return mount($app, $target);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let count = 0;</span></span><br><span class="line"><span class="comment">// let $rootEl = start(count);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// setInterval(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     $rootEl = start(++count);</span></span><br><span class="line"><span class="comment">// &#125;,4000)</span></span><br></pre></td></tr></table></figure><p>我们用$rootEle保存每次挂载后的根元素，mount函数每次都挂载到新的rootEl元素。现在我们回到浏览器界面，你应该会看到计数每隔1秒增加一次，完美！</p><p>到现在我们已经可以以声明的方式创建应用了。通过上面的几行代码，应用能按照我们预期的渲染，这其中的秘密就是这么简单。如果你知道JQuery是怎么做渲染的，对比我们现在的方法，你将会感叹这是多么简洁的做法。</p><p>然而，上面的做法是每次每隔1秒会重新渲染整个节点，这将会有以下一些问题：</p><ol><li>真实DOM比虚拟DOM笨重，每次都将整个节点重新渲染为真实DOM可能比较耗时。</li><li>元素会丢失状态。比如input元素会丢失焦点。</li></ol><p>下面我们看看如何解决上面的问题。</p><h2 id="diff-oldVTree-newVTree"><a href="#diff-oldVTree-newVTree" class="headerlink" title="diff(oldVTree, newVTree)"></a>diff(oldVTree, newVTree)</h2><blockquote><p>   <a href="https://codesandbox.io/s/0xv007yqnv" target="_blank" rel="noopener">https://codesandbox.io/s/0xv007yqnv</a> </p></blockquote><p>想像我们有一个diff(oldVTree, newVTree)函数，它用来比较旧的虚拟DOM与新的虚拟DOM之间的不同，为后面渲染做准备。diff函数返回一个patch函数，patch函数以旧的真实DOM为参数，对真实的DOM执行一些必要的操作，使其看上去像是从新的虚拟DOM创建出来的一样。</p><p>下面我们尝试实现diff函数，我们从简单的情形开始：</p><ol><li><p>newVTree是undefined</p><p>因为新的虚拟DOM已经不存在了，所以在patch函数里面可以将传入的旧的真实DOM直接删除。</p></li><li><p>newVTree与oldVTree都是文本节点（TextNode）</p><p>当两者都是文本时，如果两者相等，则无需处理；如果不相等，则用新虚拟DOM渲染出来的元素替换掉旧的真实DOM，即：用render(newTree)替换$node.</p></li><li><p>一个是文本节点一个元素节点</p><p>这种情况，很显然两者不同，直接用新虚拟DOM渲染出来的元素替换掉旧的真实DOM。</p></li><li><p>新旧虚拟DOM的tagName不一样</p><p>tagName不一样，即为不同的元素，直接用新虚拟DOM渲染出来的元素替换掉旧的真实DOM。react的算法中也是这么做的。</p></li></ol><p><strong>src/vdom/diff.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> render <span class="keyword">from</span> <span class="string">'./render'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> diff = <span class="function">(<span class="params">oldVTree, newVTree</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果新的虚拟dom是undefined</span></span><br><span class="line">    <span class="keyword">if</span>(newVTree === <span class="literal">undefined</span>)&#123;</span><br><span class="line">        <span class="comment">// 返回patch函数，$node为传入的旧的真实DOM元素</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">$node</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 删除旧的元素</span></span><br><span class="line">            $node.remove();</span><br><span class="line">            <span class="comment">// patch函数必须返回一个根元素，这种情况没有元素，所以返回undefined。</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果两者都是文本节点</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> oldVTree === <span class="string">'string'</span> || <span class="keyword">typeof</span> newVTree === <span class="string">'string'</span>)&#123;</span><br><span class="line">        <span class="comment">// 文本内容不等</span></span><br><span class="line">        <span class="keyword">if</span>(oldVTree !== newVTree)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="params">$node</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 通过新的虚拟DOM渲染得到新的真实DOM</span></span><br><span class="line">                <span class="keyword">const</span> $newNode = render(newVTree);</span><br><span class="line">                <span class="comment">// 将新的DOM替换旧的</span></span><br><span class="line">                $node.replaceWith($newNode);</span><br><span class="line">                <span class="keyword">return</span> $node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">            <span class="comment">// 文本相等，无需处理。</span></span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="params">$node</span> =&gt;</span> $node</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果两者的tagName不同</span></span><br><span class="line">    <span class="keyword">if</span>(oldVTree.tagName !== newVTree.tagName)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">$node</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 通过新的虚拟DOM渲染得到新的真实DOM</span></span><br><span class="line">            <span class="keyword">const</span> $newNode = render(newVTree);</span><br><span class="line">            <span class="comment">// 将新的DOM替换旧的</span></span><br><span class="line">            $node.replaceWith($newNode);</span><br><span class="line">            <span class="keyword">return</span> $node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// (A) ---</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> diff;</span><br></pre></td></tr></table></figure><p>上面的代码完全根据我们比较算法实现，我们只考虑了三种大的情况(元素被删，文本类型，不同元素类型)，如果代码执行到（A）的位置，那又如何处理？如果执行到（A）处，情况比较复杂，至少有以下几点我们知道：</p><ol><li>oldVTree与newVTree都是虚拟DOM</li><li>它们有相同的tagName</li><li>它们可能有不同的attrs和children</li></ol><p>我们将实现两个独立的方法来处理attrs与children的比较。暂时分别命名为<code>diffAttrs(oldAttrs, newAttrs)</code>，<code>diffChildren(oldVChildren, newVChildren)</code>，它们都会返回各自的patch函数。</p><p><strong>src/vdom/diff.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处省略上面的相同代码</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> patchAttrs = diffAttrs(oldVTree.attrs, newVTree.attrs);</span><br><span class="line"><span class="keyword">const</span> patchChildren = diffChildren(oldVTree.children, newVTree.children);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="params">$node</span> =&gt;</span> &#123;</span><br><span class="line">    patchAttrs($node);</span><br><span class="line">    patchChildren($node);</span><br><span class="line">    <span class="keyword">return</span> $node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">....</span><br></pre></td></tr></table></figure><h3 id="diffAttrs-oldAttrs-newAttrs"><a href="#diffAttrs-oldAttrs-newAttrs" class="headerlink" title="diffAttrs(oldAttrs, newAttrs)"></a>diffAttrs(oldAttrs, newAttrs)</h3><p>让我聚焦到diffAttrs函数。实际它非常简单。首先我们要将所有新的属性设置到dom上，然后将那些存在于旧的属性而不存在新的属性的属性全部删除。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> diffAttrs = <span class="function">(<span class="params">oldAttrs, newAttrs</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> patches = []; <span class="comment">// patch函数的数组</span></span><br><span class="line">    <span class="comment">// 将新的属性设置进去</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> [k, v] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(newAttrs))&#123;</span><br><span class="line">        patches.push(<span class="function"><span class="params">$node</span> =&gt;</span> &#123;</span><br><span class="line">            $node.setAttribute(k, v);</span><br><span class="line">            <span class="keyword">return</span> $node;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除不存在于新属性集而存在于旧属性集的属性</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> k <span class="keyword">in</span> oldAttrs)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!(k <span class="keyword">in</span> newAttrs))&#123;</span><br><span class="line">            patches.push(<span class="function"><span class="params">$node</span> =&gt;</span> &#123;</span><br><span class="line">                $node.removeAttribute(k);</span><br><span class="line">                <span class="keyword">return</span> $node;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">$node</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> patch <span class="keyword">of</span> patches)&#123;</span><br><span class="line">            patch($node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="diffChildren-oldVChildren-newVChildren"><a href="#diffChildren-oldVChildren-newVChildren" class="headerlink" title="diffChildren(oldVChildren, newVChildren)"></a>diffChildren(oldVChildren, newVChildren)</h3><p>Children的比较会有点复杂，我们需要考虑下面三种情况：</p><ol><li><p><code>oldVChildren.length === newVChildren.length</code></p><p>说明子元素个数一样，此时我们必须对子元素逐个比较，即：diff(oldVChildren[i], newVChildren[i])，i从0到oldVChildren.length</p></li><li><p><code>oldVChildren.length &gt; newVChildren.length</code></p><p>还是需要逐个比较子元素，直到newVChildren变为undefined，因为我们在diff里考虑了newVTree为undefined的情况，所以这种情况的处理方法跟第一种一样，即：diff(oldVChildren[i], newVChildren[i])，i从0到oldVChildren.length</p></li><li><p><code>oldVChildren.length &lt; newVChildren.length</code></p><p>先遍历oldVChildren，执行diff(oldVChildren[i], newVChildren[i])，然后将newVChildren中没有遍历到的虚拟dom，渲染为真实dom，手动加入到旧dom的子元素中。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> diffChildren = <span class="function">(<span class="params">oldVChildren, newVChildren</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> childrenPatches = [];</span><br><span class="line">    <span class="comment">// 1. 当oldVChildren.length === newVChildren.length</span></span><br><span class="line">    <span class="comment">// 2. 当oldVChildren.length &gt; newVChildren.length</span></span><br><span class="line">    <span class="comment">// 3. 当oldVChildren.length &lt; newVChildren.length</span></span><br><span class="line">    oldVChildren.forEach(<span class="function">(<span class="params">oldVChild, i</span>)=&gt;</span>&#123;</span><br><span class="line">        childrenPatches.push(diff(oldVChild, newVChildren[i]));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上面的执行完毕后，只有第三种情况中newVChildren中的部分节点没有处理到</span></span><br><span class="line">    <span class="comment">// 处理余下的节点</span></span><br><span class="line">    <span class="keyword">const</span> additionalPatches = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> additionalVChild <span class="keyword">of</span> newVChildren.slice(oldVChildren.length))&#123;</span><br><span class="line">        additionalPatches.push(<span class="function"><span class="params">$node</span> =&gt;</span> &#123;</span><br><span class="line">            $node.appendChild(render(additionalVChild));</span><br><span class="line">            <span class="keyword">return</span> $node;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">$parent</span> =&gt;</span> &#123;</span><br><span class="line">        $parent.childNodes.forEach(<span class="function">(<span class="params">$child, i</span>)=&gt;</span>&#123;</span><br><span class="line">            childrenPatches[i]($child);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> patch <span class="keyword">of</span> additionalPatches)&#123;</span><br><span class="line">            patch($parent);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $parent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>  译者注：作者原文用了一个zip函数来同时处理两个数组的循环，这里没有放出来。</p></blockquote><p>最终的diff.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> render <span class="keyword">from</span> <span class="string">'./render'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> diffAttrs = <span class="function">(<span class="params">oldAttrs, newAttrs</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> patches = []; <span class="comment">// patch函数的数组</span></span><br><span class="line">    <span class="comment">// 将新的属性设置进去</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> [k, v] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(newAttrs))&#123;</span><br><span class="line">        patches.push(<span class="function"><span class="params">$node</span> =&gt;</span> &#123;</span><br><span class="line">            $node.setAttribute(k, v);</span><br><span class="line">            <span class="keyword">return</span> $node;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除不存在于新属性集而存在于旧属性集的属性</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> k <span class="keyword">in</span> oldAttrs)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!(k <span class="keyword">in</span> newAttrs))&#123;</span><br><span class="line">            patches.push(<span class="function"><span class="params">$node</span> =&gt;</span> &#123;</span><br><span class="line">                $node.removeAttribute(k);</span><br><span class="line">                <span class="keyword">return</span> $node;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">$node</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> patch <span class="keyword">of</span> patches)&#123;</span><br><span class="line">            patch($node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> diffChildren = <span class="function">(<span class="params">oldVChildren, newVChildren</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> childrenPatches = [];</span><br><span class="line">    <span class="comment">// 1. 当oldVChildren.length === newVChildren.length</span></span><br><span class="line">    <span class="comment">// 2. 当oldVChildren.length &gt; newVChildren.length</span></span><br><span class="line">    <span class="comment">// 3. 当oldVChildren.length &lt; newVChildren.length</span></span><br><span class="line">    oldVChildren.forEach(<span class="function">(<span class="params">oldVChild, i</span>)=&gt;</span>&#123;</span><br><span class="line">        childrenPatches.push(diff(oldVChild, newVChildren[i]));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上面的执行完毕后，只有第三种情况中newVChildren中的部分节点没有处理到</span></span><br><span class="line">    <span class="comment">// 处理余下的节点</span></span><br><span class="line">    <span class="keyword">const</span> additionalPatches = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> additionalVChild <span class="keyword">of</span> newVChildren.slice(oldVChildren.length))&#123;</span><br><span class="line">        additionalPatches.push(<span class="function"><span class="params">$node</span> =&gt;</span> &#123;</span><br><span class="line">            $node.appendChild(render(additionalVChild));</span><br><span class="line">            <span class="keyword">return</span> $node;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">$parent</span> =&gt;</span> &#123;</span><br><span class="line">        $parent.childNodes.forEach(<span class="function">(<span class="params">$child, i</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// childrenPatches[i]($child); -- 原文有错</span></span><br><span class="line">            <span class="comment">// 因为diff可能返回undefined，所以需要判断patch是否存在。</span></span><br><span class="line">            childrenPatches[i]&amp;&amp;childrenPatches[i]($child);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> patch <span class="keyword">of</span> additionalPatches)&#123;</span><br><span class="line">            patch($parent);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $parent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> diff = <span class="function">(<span class="params">oldVTree, newVTree</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果新的虚拟dom是undefined</span></span><br><span class="line">    <span class="keyword">if</span>(newVTree === <span class="literal">undefined</span>)&#123;</span><br><span class="line">        <span class="comment">// 返回patch函数，$node为传入的旧的真实DOM元素</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">$node</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 删除旧的元素</span></span><br><span class="line">            $node.remove();</span><br><span class="line">            <span class="comment">// patch函数必须返回一个根元素，这种情况没有元素，所以返回undefined。</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果两者都是文本节点</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> oldVTree === <span class="string">'string'</span> || <span class="keyword">typeof</span> newVTree === <span class="string">'string'</span>)&#123;</span><br><span class="line">        <span class="comment">// 文本内容不等</span></span><br><span class="line">        <span class="keyword">if</span>(oldVTree !== newVTree)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="params">$node</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 通过新的虚拟DOM渲染得到新的真实DOM</span></span><br><span class="line">                <span class="keyword">const</span> $newNode = render(newVTree);</span><br><span class="line">                <span class="comment">// 将新的DOM替换旧的</span></span><br><span class="line">                $node.replaceWith($newNode);</span><br><span class="line">                <span class="keyword">return</span> $node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">            <span class="comment">// 文本相等，无需处理。</span></span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="params">$node</span> =&gt;</span> $node</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果两者的tagName不同</span></span><br><span class="line">    <span class="keyword">if</span>(oldVTree.tagName !== newVTree.tagName)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">$node</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 通过新的虚拟DOM渲染得到新的真实DOM</span></span><br><span class="line">            <span class="keyword">const</span> $newNode = render(newVTree);</span><br><span class="line">            <span class="comment">// 将新的DOM替换旧的</span></span><br><span class="line">            $node.replaceWith($newNode);</span><br><span class="line">            <span class="keyword">return</span> $node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> patchAttrs = diffAttrs(oldVTree.attrs, newVTree.attrs);</span><br><span class="line">    <span class="keyword">const</span> patchChidlren = diffChildren(oldVTree.children, newVTree.children);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">$node</span> =&gt;</span> &#123;</span><br><span class="line">        patchAttrs($node);</span><br><span class="line">        patchChidlren($node);</span><br><span class="line">        <span class="keyword">return</span> $node;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> diff;</span><br></pre></td></tr></table></figure><h2 id="让我们的app再复杂一点"><a href="#让我们的app再复杂一点" class="headerlink" title="让我们的app再复杂一点"></a>让我们的app再复杂一点</h2><blockquote><p>   <a href="https://codesandbox.io/s/mpmo2yy69" target="_blank" rel="noopener">https://codesandbox.io/s/mpmo2yy69</a> </p></blockquote><p>我们当前的应用实际是没有用到虚拟DOM的全部功能的。为了展示虚拟DOM的强大功能，让我们再次修改我们应用，让它变得再复杂一点。</p><p><strong>src/main.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> createElement <span class="keyword">from</span> <span class="string">"./vdom/createElement"</span>;</span><br><span class="line"><span class="keyword">import</span> render <span class="keyword">from</span> <span class="string">"./vdom/render"</span>;</span><br><span class="line"><span class="keyword">import</span> mount <span class="keyword">from</span> <span class="string">"./vdom/mount"</span>;</span><br><span class="line"><span class="keyword">import</span> diff <span class="keyword">from</span> <span class="string">'./vdom/diff'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createVApp = <span class="function"><span class="params">count</span> =&gt;</span> createElement(<span class="string">'div'</span>, &#123;</span><br><span class="line">    attrs: &#123;</span><br><span class="line">        id: <span class="string">'app'</span>,</span><br><span class="line">        dataCount: count</span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">        <span class="string">'The current count is: '</span>,</span><br><span class="line">        <span class="built_in">String</span>(count),</span><br><span class="line">        ...Array.from(&#123;<span class="attr">length</span>: count&#125;, ()=&gt; createElement(<span class="string">'img'</span>,&#123;</span><br><span class="line">            attrs: &#123;</span><br><span class="line">                src: <span class="string">'https://media.giphy.com/media/cuPm4p4pClZVC/giphy.gif'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;))</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vApp = createVApp(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> $app = render(vApp);</span><br><span class="line"><span class="keyword">const</span> $target = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>);</span><br><span class="line"><span class="keyword">let</span> $rootEl = mount($app, $target);</span><br><span class="line"></span><br><span class="line">setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> n = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">let</span> newVApp = createVApp(n);</span><br><span class="line">    <span class="keyword">const</span> patch = diff(vApp, newVApp);</span><br><span class="line">    $rootEl = patch($rootEl);</span><br><span class="line">    vApp = newVApp;</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// function start(count)&#123;</span></span><br><span class="line"><span class="comment">//     let vApp = createVApp(count);</span></span><br><span class="line"><span class="comment">//     const $app = render(vApp);</span></span><br><span class="line"><span class="comment">//     const $target = document.getElementById('app');</span></span><br><span class="line"><span class="comment">//     return mount($app, $target);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let count = 0;</span></span><br><span class="line"><span class="comment">// let $rootEl = start(count);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// setInterval(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     $rootEl = start(++count);</span></span><br><span class="line"><span class="comment">// &#125;,4000)</span></span><br></pre></td></tr></table></figure><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>感谢您花时间一直阅读到这里，这篇文章确实有点长。读完还请留言！~</p><p>原文中已经提供了文章中所有代码的链接，还有git仓库。这里我也按照作者的代码自己实现了一遍，需要的请链接：</p><p> <a href="https://github.com/ywxgod/learningExamples/tree/master/tanslations/building_a_simple_virtual_dom_from_scratch" target="_blank" rel="noopener">https://github.com/ywxgod/learningExamples/tree/master/tanslations/building_a_simple_virtual_dom_from_scratch</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此文主要翻译自：&lt;a href=&quot;https://dev.to/ycmjason/building-a-simple-virtual-dom-from-scratch-3d05&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Building a Simple Virtual DOM from Scratch&lt;/a&gt;，看原文的同学请直达！&lt;/p&gt;
&lt;p&gt;此文是作者在一次现场编程演讲时现场所做的，有关演讲的相关资料我们也可以在原英文链接找到。&lt;/p&gt;
&lt;h2 id=&quot;背景：什么是虚拟DOM&quot;&gt;&lt;a href=&quot;#背景：什么是虚拟DOM&quot; class=&quot;headerlink&quot; title=&quot;背景：什么是虚拟DOM&quot;&gt;&lt;/a&gt;背景：什么是虚拟DOM&lt;/h2&gt;&lt;p&gt;虚拟DOM指的是用于展现真实DOM的普通JS对象。简单说就是JS的普通对象，通过这个对象可以创建真实的DOM，它保存了创建真实DOM所需的所有东西。
    
    </summary>
    
      <category term="重学JS" scheme="https://ywxgod.github.io/blog/categories/%E9%87%8D%E5%AD%A6JS/"/>
    
    
      <category term="虚拟DOM" scheme="https://ywxgod.github.io/blog/tags/%E8%99%9A%E6%8B%9FDOM/"/>
    
  </entry>
  
  <entry>
    <title>vuejs的响应式</title>
    <link href="https://ywxgod.github.io/blog/2019/11/07/vuejs/reactivity_in_vuejs/"/>
    <id>https://ywxgod.github.io/blog/2019/11/07/vuejs/reactivity_in_vuejs/</id>
    <published>2019-11-06T16:33:41.621Z</published>
    <updated>2019-11-06T16:35:15.427Z</updated>
    
    <content type="html"><![CDATA[<p>大家都知道Vue.js 2.x的版本实现数据的响应式用的是Object.defineProperty方法，那它究竟是如何让vue组件具有响应式的呢？如果让你自己实现，该从何着手？。。。</p><p>此篇主要翻译自：<a href="https://dev.to/koehr/vuejs-reactivity-from-scratch" target="_blank" rel="noopener">Vuejs Reactivity From Scratch</a>，E文好的请看E文。<br><a id="more"></a></p><h2 id="对象的响应式"><a href="#对象的响应式" class="headerlink" title="对象的响应式"></a>对象的响应式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">obj, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> wrapped = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">let</span> value = obj[key]</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">'object'</span>) &#123;</span><br><span class="line">            value = reactive(value, callback)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(wrapped, key, &#123;</span><br><span class="line">            get: <span class="function"><span class="keyword">function</span> <span class="title">reactiveGetter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> value</span><br><span class="line">            &#125;,</span><br><span class="line">            set: <span class="function"><span class="keyword">function</span> <span class="title">reactiveGetter</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'setting value from'</span>, value, <span class="string">'to'</span>, newValue)</span><br><span class="line">                value = newValue</span><br><span class="line">                callback()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历原对象的每个属性，用Object.defineProperty重新定义，当给属性赋值时会调用set方法。</p><h2 id="数组的响应式"><a href="#数组的响应式" class="headerlink" title="数组的响应式"></a>数组的响应式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactiveArray</span>(<span class="params">ary, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> wrapped = ary.slice();</span><br><span class="line">    <span class="keyword">const</span> arrayFunctions = [<span class="string">'push'</span>, <span class="string">'pop'</span>, <span class="string">'shift'</span>, <span class="string">'unshift'</span>, <span class="string">'splice'</span>, <span class="string">'sort'</span>, <span class="string">'reverse'</span>];</span><br><span class="line">    arrayFunctions.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> original = <span class="built_in">Array</span>.prototype[fn]</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(wrapped, fn, &#123;</span><br><span class="line">            value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'feelin manipulative?'</span>)</span><br><span class="line">                <span class="keyword">const</span> result = original.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">                callback()</span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="考虑对象和数组"><a href="#考虑对象和数组" class="headerlink" title="考虑对象和数组"></a>考虑对象和数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">obj, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) <span class="keyword">return</span> obj</span><br><span class="line">    <span class="keyword">const</span> wrapped = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">let</span> value = obj[key]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">            value = reactiveArray(value, callback)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">'object'</span>) &#123;</span><br><span class="line">            value = reactive(value, callback)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(wrapped, key, &#123;</span><br><span class="line">            get: <span class="function"><span class="keyword">function</span> <span class="title">reactiveGetter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> value</span><br><span class="line">            &#125;,</span><br><span class="line">            set: <span class="function"><span class="keyword">function</span> <span class="title">reactiveGetter</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'setting value from'</span>, value, <span class="string">'to'</span>, newValue)</span><br><span class="line">                value = newValue</span><br><span class="line">                callback()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模拟组件应用"><a href="#模拟组件应用" class="headerlink" title="模拟组件应用"></a>模拟组件应用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createComponent</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> data = obj.data || &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> render = obj.render.bind(obj)</span><br><span class="line">    obj.data = reactive(data, render)</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> helloComponent = createComponent(&#123;</span><br><span class="line">    el: <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>),</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: &#123;</span><br><span class="line">            first: <span class="string">'Hansi'</span>,</span><br><span class="line">            last: <span class="string">'Hinterseer'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'rendering helloComponent'</span>)</span><br><span class="line">        <span class="keyword">this</span>.el.innerHTML = <span class="string">`&lt;h1&gt;Hello <span class="subst">$&#123;<span class="keyword">this</span>.data.name.first&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.data.name.last&#125;</span>&lt;/h1&gt;`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lipsumComponent = createComponent(&#123;</span><br><span class="line">    el: <span class="built_in">document</span>.getElementById(<span class="string">'content2'</span>),</span><br><span class="line">    data: &#123;</span><br><span class="line">        content: []</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'rendering lipsumComponent'</span>)</span><br><span class="line">        <span class="keyword">const</span> elements = <span class="keyword">this</span>.data.content.map(<span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> tag = el[<span class="number">0</span>],</span><br><span class="line">                text = el[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`&lt;<span class="subst">$&#123;tag&#125;</span>&gt;<span class="subst">$&#123;text&#125;</span>&lt;/<span class="subst">$&#123;tag&#125;</span>&gt;`</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">this</span>.el.innerHTML = elements.join(<span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">helloComponent.data.name.first = <span class="string">'Ada'</span></span><br><span class="line">helloComponent.data.name.last = <span class="string">'Lovelace'</span></span><br><span class="line">lipsumComponent.data.content.push(</span><br><span class="line">    [<span class="string">'p'</span>, <span class="string">'Lorem Ipsum sit amet dolor…'</span>]</span><br><span class="line">)</span><br><span class="line">lipsumComponent.data.content.push([<span class="string">'p'</span>, <span class="string">'Hereby I kindly declare that I am out of ideas!'</span>])</span><br></pre></td></tr></table></figure><p>当更新组件的data对象的属性值时，就会调用定义属性的set方法时传入的callback，而callback是组件的render方法，这样就重新渲染了组件。当然vue中的渲染是异步的，每次属性改变时它不会即时渲染。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家都知道Vue.js 2.x的版本实现数据的响应式用的是Object.defineProperty方法，那它究竟是如何让vue组件具有响应式的呢？如果让你自己实现，该从何着手？。。。&lt;/p&gt;
&lt;p&gt;此篇主要翻译自：&lt;a href=&quot;https://dev.to/koehr/vuejs-reactivity-from-scratch&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vuejs Reactivity From Scratch&lt;/a&gt;，E文好的请看E文。&lt;br&gt;
    
    </summary>
    
      <category term="code" scheme="https://ywxgod.github.io/blog/categories/code/"/>
    
    
      <category term="vuejs" scheme="https://ywxgod.github.io/blog/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>005 - Object相关</title>
    <link href="https://ywxgod.github.io/blog/2019/10/29/jsinfo/object/"/>
    <id>https://ywxgod.github.io/blog/2019/10/29/jsinfo/object/</id>
    <published>2019-10-29T01:25:01.643Z</published>
    <updated>2019-10-29T01:30:09.019Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Object属性操作"><a href="#Object属性操作" class="headerlink" title="Object属性操作"></a>Object属性操作</h2><p>object的属性只能是任意字符串，如果给定非字符串，JS会将其转为字符串。<br>实践中最好使用简单数据类型，如：字符串，Symbol，数字等，属性可以是JS保留字，如：<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保留字</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">for</span>:<span class="number">1</span>,<span class="attr">return</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.for, obj.return); <span class="comment">// 1, 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 非字符串属性</span></span><br><span class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>(<span class="string">'sym'</span>);</span><br><span class="line">obj = &#123;[sym]:<span class="number">1</span>&#125;</span><br><span class="line">alert(obj.sym, obj[sym]); <span class="comment">// undefined, 1 </span></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123;Symbol(sym): 1&#125; JS会调用Symbol的toString()方法将sym转为字符串,所以并不存在sym属性，而是Symbol(sym)属性</span></span><br></pre></td></tr></table></figure></p><p><code>虽然可以用保留字，但实践中最好还是不要这么做。</code></p><p>删除属性可以用delete，访问某个属性直接用object.prop，也可以用object[‘prop’]，属性<strong>proto</strong>无法被修改。</p><h2 id="如何判断属性是否存在"><a href="#如何判断属性是否存在" class="headerlink" title="如何判断属性是否存在"></a>如何判断属性是否存在</h2><p>要判断某个属性是否存在于一个对象，可以用in操作符。in操作符会先查找对象本身，然后再在原型链上查找，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断age属性是否存在</span></span><br><span class="line">user = &#123;<span class="attr">name</span>:<span class="string">'wyin'</span>, <span class="attr">email</span>:<span class="string">'ywxgod@gmail.com'</span>,<span class="attr">age</span>: <span class="literal">undefined</span>&#125;</span><br><span class="line">user2 = <span class="built_in">Object</span>.create(user);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'age'</span> <span class="keyword">in</span> user); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'age'</span> <span class="keyword">in</span> user2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 恰好需要判断的属性值为undefined的时候，如果用 typeof user.age === 'undefined' 来判断就会错误</span></span><br></pre></td></tr></table></figure><h2 id="如何获取全部属性"><a href="#如何获取全部属性" class="headerlink" title="如何获取全部属性"></a>如何获取全部属性</h2><table><thead><tr><th>方法</th><th>属性类型</th><th>对象本身</th><th>原型链对象</th></tr></thead><tbody><tr><td>Object.keys(obj)</td><td>只能获取字符串类型的属性</td><td>只能获取对象本身的属性</td><td>对象的原型上的属性无法获取</td></tr><tr><td>Object.getOwnPropertyNames(obj)</td><td>只能获取字符串类型的属性</td><td>只能获取对象本身的属性</td><td>对象的原型上的属性无法获取</td></tr><tr><td>Object.getOwnPropertySymbols(obj)</td><td>只能获取Symbol类型的属性</td><td>只能获取对象本身的属性</td><td>对象的原型上的属性无法获取</td></tr><tr><td>Reflet.ownKeys(obj)</td><td>可以获取所有类型属性</td><td>只能获取对象本身的属性</td><td>对象的原型上的属性无法获取</td></tr></tbody></table><p>代码示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sym = <span class="built_in">Symbol</span>(<span class="string">'mysym'</span>);</span><br><span class="line">user = &#123;<span class="attr">name</span>:<span class="string">'wyin'</span>, <span class="attr">email</span>:<span class="string">'ywxgod@gmail.com'</span>,<span class="attr">age</span>: <span class="literal">undefined</span>, [sym]: <span class="string">'web'</span>&#125;</span><br><span class="line">user2 = <span class="built_in">Object</span>.create(user);</span><br><span class="line">user2.task = <span class="string">'translate'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(user)); <span class="comment">// (3) ["name", "email", "age"]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(user2)); <span class="comment">// ["task"]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(user)); <span class="comment">// (3) ["name", "email", "age"]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(user2)); <span class="comment">// ["task"]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(user)); <span class="comment">// [Symbol(mysym)]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(user2)); <span class="comment">// []</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.ownKeys(user)); <span class="comment">// (4) ["name", "email", "age", Symbol(mysym)]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.ownKeys(user2)); <span class="comment">// ["task"]</span></span><br></pre></td></tr></table></figure><p>上面四种方法，全部都是针对对象本身获取属性，我们无法获取到原型上的属性。<br>如果只是要获取字符串类型的属性，我们可以用Object.keys()或者Object.getOwnPropertyNames()。<br>如果要获取Symbol类型的属性，我们可以用Object.getOwnPropertySymbols()。<br>如果要获取全部属性，则需要用Reflect.ownKeys()。</p><h2 id="如何遍历全部属性"><a href="#如何遍历全部属性" class="headerlink" title="如何遍历全部属性"></a>如何遍历全部属性</h2><p>遍历属性一般可以采用下面两种方法：</p><h3 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h3><p>for…in遍历的时候会对能转为整数的字符串属性进行排序，而其他的字符串属性会按照创建顺序遍历。所谓‘能转为整数的字符串属性’，指的是用String(Math.trunc(Number(prop)))===prop的属性，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> codes = &#123;</span><br><span class="line">  <span class="string">"49"</span>: <span class="string">"Germany"</span>,</span><br><span class="line">  <span class="string">"41"</span>: <span class="string">"Switzerland"</span>,</span><br><span class="line">  <span class="string">"44"</span>: <span class="string">"Great Britain"</span>,</span><br><span class="line">  <span class="string">"1"</span>: <span class="string">"USA"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> code <span class="keyword">in</span> codes)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(code, codes[code]); <span class="comment">// 1, 41, 44, 49</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于数字属性，遍历时为了保证其创建顺序，我们可以在每个属性之前加一个 + ，遍历的时候读取的是字符串 ‘+n’，使用的时候再转为数字，所以我们用一元操作符 + ，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> codes = &#123;</span><br><span class="line">  <span class="string">"+49"</span>: <span class="string">"Germany"</span>,</span><br><span class="line">  <span class="string">"+41"</span>: <span class="string">"Switzerland"</span>,</span><br><span class="line">  <span class="string">"+44"</span>: <span class="string">"Great Britain"</span>,</span><br><span class="line">  <span class="string">"+1"</span>: <span class="string">"USA"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> code <span class="keyword">in</span> codes) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log( +code, codes[code]); <span class="comment">// 49, 41, 44, 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="先获取到需要的属性，再用数组的方式遍历"><a href="#先获取到需要的属性，再用数组的方式遍历" class="headerlink" title="先获取到需要的属性，再用数组的方式遍历"></a>先获取到需要的属性，再用数组的方式遍历</h3><p>这种方式是将上面的四种方法，根据需要使用即可。</p><h2 id="浅复制"><a href="#浅复制" class="headerlink" title="浅复制"></a>浅复制</h2><p>目前比较常用的是用Object.assign,或者扩展运算符 … ，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">user = &#123;</span><br><span class="line">    name:<span class="string">'wyin'</span>, </span><br><span class="line">    email:<span class="string">'ywxgod@gmail.com'</span>,</span><br><span class="line">    age: <span class="literal">undefined</span>, </span><br><span class="line">    [sym]: <span class="string">'web'</span>, </span><br><span class="line">    <span class="string">'+12'</span>: <span class="number">12</span>, </span><br><span class="line">    <span class="string">'3.2'</span>:<span class="number">23</span>, </span><br><span class="line">    speak: <span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;, </span><br><span class="line">    walk: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;, </span><br><span class="line">    birthday: <span class="keyword">new</span> <span class="built_in">Date</span>(), </span><br><span class="line">    books:[<span class="string">'book1'</span>,<span class="string">'book2'</span>],</span><br><span class="line">    task: &#123;</span><br><span class="line">        walk: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">userCopied = &#123;...user&#125;;</span><br><span class="line">userCopied.books[<span class="number">0</span>] = <span class="string">'apple'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(user.books); <span class="comment">// ["apple", "book2"]</span></span><br></pre></td></tr></table></figure><h2 id="深复制"><a href="#深复制" class="headerlink" title="深复制"></a>深复制</h2><h3 id="v8-serialize-amp-amp-v8-deserialize"><a href="#v8-serialize-amp-amp-v8-deserialize" class="headerlink" title="v8.serialize&amp;&amp;v8.deserialize"></a>v8.serialize&amp;&amp;v8.deserialize</h3><p>这两个方法是Node11才有的，浏览器环境暂时不支持。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> v8 = <span class="built_in">require</span>(<span class="string">'v8'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> structuredClone = <span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> v8.deserialize(v8.serialize(obj));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="JSON-stringify-amp-amp-JSON-parse"><a href="#JSON-stringify-amp-amp-JSON-parse" class="headerlink" title="JSON.stringify&amp;&amp;JSON.parse"></a>JSON.stringify&amp;&amp;JSON.parse</h3><p>最好应用在比较小的原始对象上，且对象的属性值最好是简单类型(symbol除外)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plainObj = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>, <span class="attr">d</span>:[<span class="number">1</span>,<span class="number">2</span>], <span class="attr">e</span>:<span class="literal">true</span>&#125;;</span><br><span class="line">plainObjCopied = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(plainObj));</span><br><span class="line"><span class="built_in">console</span>.log(plainObjCopied); <span class="comment">// &#123;a: 1, b: 2, c: 3, d: Array(2), e: true&#125;</span></span><br></pre></td></tr></table></figure><p>对于其他类型，它会丢失。如值为函数、undefined，Symbol属性。对于自定义类型且复制后不保证数据类型，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">sym = <span class="built_in">Symbol</span>(<span class="string">'mysym'</span>);</span><br><span class="line">user = &#123;</span><br><span class="line">    name:<span class="string">'wyin'</span>, </span><br><span class="line">    email:<span class="string">'ywxgod@gmail.com'</span>,</span><br><span class="line">    age: <span class="literal">undefined</span>, </span><br><span class="line">    [sym]: <span class="string">'web'</span>, </span><br><span class="line">    <span class="string">'+12'</span>: <span class="number">12</span>, </span><br><span class="line">    <span class="string">'3.2'</span>:<span class="number">23</span>, </span><br><span class="line">    speak: <span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;, </span><br><span class="line">    walk: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;, </span><br><span class="line">    birthday: <span class="keyword">new</span> <span class="built_in">Date</span>(), </span><br><span class="line">    books:[<span class="string">'book1'</span>,<span class="string">'book2'</span>],</span><br><span class="line">    task: &#123;</span><br><span class="line">        walk: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">user2 = <span class="built_in">Object</span>.create(user);</span><br><span class="line">user2.task = <span class="string">'translate'</span>;</span><br><span class="line"></span><br><span class="line">userCopy = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(user));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.ownKeys(userCopy)); <span class="comment">// ["name", "email", "+12", "3.2", "birthday", "books", "task"]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> userCopy.birthday); <span class="comment">// string , Date类型变成了String</span></span><br><span class="line"><span class="built_in">console</span>.log(userCopy.task); <span class="comment">// &#123;walk: 2&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(userCopy.books); <span class="comment">// ["book1", "book2"]</span></span><br><span class="line"></span><br><span class="line">userCopy2 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(user2));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.ownKeys(userCopy2)); <span class="comment">// ["task"] 只会序列号本身属性</span></span><br></pre></td></tr></table></figure><h3 id="根据不同的类型逐个属性复制对象"><a href="#根据不同的类型逐个属性复制对象" class="headerlink" title="根据不同的类型逐个属性复制对象"></a>根据不同的类型逐个属性复制对象</h3><ol><li>对于简单类型，null，undefined我们只需要直接复制就可以。</li><li>对于数组，先创建一个空数组，再逐个判断每个数组元素的类型进行复制，直到都是简单类型。</li><li>对于Date类型，先创建一个Date对象，然后将其时间戳设置给新对象即可。</li><li>对于object类型，循环遍历所有属性，根据属性值类型逐个判断。</li></ol><p>下面是在某个js库中发现的方法，稍微改了一下。（是哪个库，记不得了~！:cry:）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> copy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle the 3 simple types, and null or undefined</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == obj || <span class="string">"object"</span> != <span class="keyword">typeof</span> obj) <span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle Date</span></span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">        copy = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        copy.setTime(obj.getTime());</span><br><span class="line">        <span class="keyword">return</span> copy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle Array</span></span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">        copy = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = obj.length; i &lt; len; i++) &#123;</span><br><span class="line">            copy[i] = clone(obj[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> copy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle Object</span></span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">        copy = &#123;&#125;;</span><br><span class="line">        <span class="comment">// 用for...in无法遍历到Symbol类型的属性</span></span><br><span class="line">        <span class="comment">// for (var attr in obj) &#123;</span></span><br><span class="line">        <span class="comment">// if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">let</span> keys = <span class="built_in">Reflect</span>.ownKeys(obj);</span><br><span class="line">        keys.forEach(<span class="function"><span class="params">attr</span>=&gt;</span>&#123;</span><br><span class="line">            copy[attr] = clone(obj[attr])</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> copy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Unable to copy obj! Its type isn't supported."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sym = <span class="built_in">Symbol</span>(<span class="string">'mysym'</span>);</span><br><span class="line">user = &#123;</span><br><span class="line">    name:<span class="string">'wyin'</span>, </span><br><span class="line">    email:<span class="string">'ywxgod@gmail.com'</span>,</span><br><span class="line">    age: <span class="literal">undefined</span>, </span><br><span class="line">    [sym]: <span class="string">'web'</span>, </span><br><span class="line">    <span class="string">'+12'</span>: <span class="number">12</span>, </span><br><span class="line">    <span class="string">'3.2'</span>:<span class="number">23</span>, </span><br><span class="line">    speak: <span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;, </span><br><span class="line">    walk: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;, </span><br><span class="line">    birthday: <span class="keyword">new</span> <span class="built_in">Date</span>(), </span><br><span class="line">    books:[<span class="string">'book1'</span>,<span class="string">'book2'</span>],</span><br><span class="line">    task: &#123;</span><br><span class="line">        walk: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">userCopied = clone(user);</span><br><span class="line"><span class="built_in">console</span>.log(userCopied);</span><br><span class="line"><span class="comment">// chrome 控制台输出</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">&#123;name: "wyin", email: "ywxgod@gmail.com", age: undefined, +12: 12, 3.2: 23, …&#125;</span></span><br><span class="line"><span class="comment">3.2: 23</span></span><br><span class="line"><span class="comment">+12: 12</span></span><br><span class="line"><span class="comment">age: undefined</span></span><br><span class="line"><span class="comment">birthday: Tue Oct 29 2019 09:10:11 GMT+0800 (中国标准时间) &#123;&#125;</span></span><br><span class="line"><span class="comment">books: (2) ["book1", "book2"]</span></span><br><span class="line"><span class="comment">email: "ywxgod@gmail.com"</span></span><br><span class="line"><span class="comment">name: "wyin"</span></span><br><span class="line"><span class="comment">speak: ()=&gt;&#123;&#125;</span></span><br><span class="line"><span class="comment">task: &#123;walk: 2&#125;</span></span><br><span class="line"><span class="comment">walk: ƒ ()</span></span><br><span class="line"><span class="comment">Symbol(mysym): "web"</span></span><br><span class="line"><span class="comment">__proto__: Object</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="利用一些现有库方法，如lodash的deepCopy"><a href="#利用一些现有库方法，如lodash的deepCopy" class="headerlink" title="利用一些现有库方法，如lodash的deepCopy"></a>利用一些现有库方法，如lodash的deepCopy</h3><p>具体可以参考lodash的文档。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;Object属性操作&quot;&gt;&lt;a href=&quot;#Object属性操作&quot; class=&quot;headerlink&quot; title=&quot;Object属性操作&quot;&gt;&lt;/a&gt;Object属性操作&lt;/h2&gt;&lt;p&gt;object的属性只能是任意字符串，如果给定非字符串，JS会将其转为字符串。&lt;br&gt;实践中最好使用简单数据类型，如：字符串，Symbol，数字等，属性可以是JS保留字，如：&lt;br&gt;
    
    </summary>
    
      <category term="重学JS" scheme="https://ywxgod.github.io/blog/categories/%E9%87%8D%E5%AD%A6JS/"/>
    
    
      <category term="Object" scheme="https://ywxgod.github.io/blog/tags/Object/"/>
    
  </entry>
  
  <entry>
    <title>TS项目如何开始及基本类型介绍</title>
    <link href="https://ywxgod.github.io/blog/2019/10/24/ts/base_types/"/>
    <id>https://ywxgod.github.io/blog/2019/10/24/ts/base_types/</id>
    <published>2019-10-23T17:34:03.500Z</published>
    <updated>2019-10-23T17:41:58.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从typescript源文件到执行的过程"><a href="#从typescript源文件到执行的过程" class="headerlink" title="从typescript源文件到执行的过程"></a>从typescript源文件到执行的过程</h2><a id="more"></a><table><thead><tr><th>执行者</th><th>步骤</th><th>说明</th></tr></thead><tbody><tr><td>TSC</td><td>1. TypeScript Source -&gt; TypeScript AST</td><td>TSC将ts文件转为TS AST(abstract syntax tree)</td></tr><tr><td>TSC</td><td>2. AST is checked by typechecker</td><td>TSC的类型检查器对AST做类型检查</td></tr><tr><td>TSC</td><td>3. TypeScript AST -&gt; Javascript Source</td><td>TSC将TS AST转为JS的源代码(可能是ES3/5/6)</td></tr><tr><td>JS(浏览器/Node.js)</td><td>4. Javascript Source -&gt; Javascript AST</td><td>JS运行时将JS源码转为JS AST</td></tr><tr><td>JS(浏览器/Node.js)</td><td>5. Javascript AST -&gt; bytecode</td><td>JS运行时将JS AST 转为字节码，准备运行</td></tr><tr><td>JS(浏览器/Node.js)</td><td>6. Bytecode is evaluated by runtime</td><td>JS运行时运行js字节码</td></tr></tbody></table><p>其中1-3步是TSC处理的，4-6步为JS运行时处理，可能是浏览器也可能是Node.js。</p><p>从上面步骤可以知道，TSC做类型检查是在将TS AST转为JS源码之前，也就是说从TS AST转为JS源码时，是没有做类型检查的。检查类型时针对TS AST的，即第二步。</p><p>也意味着TS的类型系统，强类型的各种机制，仅仅对类型检查有用，对产出的JS无影响，增加类型不会污染JS源文件。</p><h2 id="关于tsconfig-json"><a href="#关于tsconfig-json" class="headerlink" title="关于tsconfig.json"></a>关于tsconfig.json</h2><p>可以通过 tsc –init 创建tsconfig.json文件，如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    "target": "es2015",                          /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */</span><br><span class="line">    "module": "commonjs",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */</span><br><span class="line">    "lib": ["es2015"],                             /* Specify library files to be included in the compilation. */</span><br><span class="line">    "sourceMap": true,                     /* Generates corresponding '.map' file. */</span><br><span class="line">    // "outFile": "./",                       /* Concatenate and emit output to single file. */</span><br><span class="line">    "outDir": "dist",                        /* Redirect output structure to the directory. */</span><br><span class="line">    "strict": true,                           /* Enable all strict type-checking options. */</span><br><span class="line">    "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */</span><br><span class="line">    "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */</span><br><span class="line">    "esModuleInterop": true                   /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面主要看几个常用配置：</p><table><thead><tr><th>配置属性</th><th>描述</th></tr></thead><tbody><tr><td>include</td><td>告诉TSC在哪里找到ts文件</td></tr><tr><td>lib</td><td>告诉TSC当前运行时已存在的API，通常包括：ES5的bind，新增数组方法，ES6的新增方法等</td></tr><tr><td>module</td><td>告诉TSC将ts文件转为那种模块标准的js文件，通常有cmj，cmd，es6等</td></tr><tr><td>outDir</td><td>告诉TSC将转换后的文件放到哪个目录</td></tr><tr><td>strict</td><td>告诉TSC是否进行严格的类型检查</td></tr><tr><td>target</td><td>告诉TSC将ts转换成哪个版本的js，通常有ES3，ES5，ES6等</td></tr><tr><td>noImplicitAny</td><td>是否允许存在未定义的类型，即隐式类型。TSC不会自己猜测类型</td></tr><tr><td>alwaysStrict</td><td>TSC会在产出的每个js文件中带上use strict语句</td></tr></tbody></table><h2 id="关于tslint"><a href="#关于tslint" class="headerlink" title="关于tslint"></a>关于tslint</h2><p>可以通过 tslint –init 创建默认的tslint.json文件，如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"defaultSeverity"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="attr">"extends"</span>: [</span><br><span class="line">        <span class="string">"tslint:recommended"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"jsRules"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"rules"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"rulesDirectory"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型"><a href="#类型" class="headerlink" title="{}类型"></a>{}类型</h2><p>当将一个变量设置为{}类型是，意味着此变量的值可以是除了null和undefined之外的任何值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a:&#123;&#125; = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b:&#123;&#125; = <span class="built_in">Symbol</span>(<span class="string">'b'</span>);</span><br><span class="line"><span class="keyword">let</span> c:&#123;&#125; = <span class="literal">null</span>; <span class="comment">// Type 'null' is not assignable to type '&#123;&#125;'.</span></span><br><span class="line"><span class="keyword">let</span> d:&#123;&#125; = <span class="literal">undefined</span>; <span class="comment">// Type 'undefined' is not assignable to type '&#123;&#125;'.</span></span><br></pre></td></tr></table></figure><h2 id="object类型"><a href="#object类型" class="headerlink" title="object类型"></a>object类型</h2><p>当将一个变量设置为object类型时，意味着此变量的值可以是除了字符串，数字，Symbol，null，undefined，布尔值之外的任何值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a:object = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> b:object = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> c:object = [];</span><br><span class="line"><span class="keyword">let</span> d:object = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">''</span>);</span><br><span class="line"><span class="keyword">let</span> e:object = <span class="literal">true</span>; <span class="comment">// Type 'true' is not assignable to type 'object'.</span></span><br><span class="line"><span class="keyword">let</span> f:object = <span class="built_in">Symbol</span>(); <span class="comment">// Type 'symbol' is not assignable to type 'object'.</span></span><br><span class="line"><span class="keyword">let</span> g:object = <span class="number">1</span>; <span class="comment">// Type '1' is not assignable to type 'object'.</span></span><br><span class="line"><span class="keyword">let</span> h:object = <span class="string">'1'</span>; <span class="comment">// Type '"1"' is not assignable to type 'object'.</span></span><br></pre></td></tr></table></figure><h2 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h2><p>同{}类型。</p><table><thead><tr><th>Value</th><th>{}</th><th>object</th><th>Object</th></tr></thead><tbody><tr><td>{}</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>[‘a’]</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>function(){}</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>new String(‘a’)</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>‘a’</td><td>Yes</td><td>No</td><td>Yes</td></tr><tr><td>1</td><td>Yes</td><td>No</td><td>Yes</td></tr><tr><td>Symbol()</td><td>Yes</td><td>No</td><td>Yes</td></tr><tr><td>true</td><td>Yes</td><td>No</td><td>Yes</td></tr><tr><td>null</td><td>No</td><td>No</td><td>No</td></tr><tr><td>undefined</td><td>No</td><td>No</td><td>No</td></tr></tbody></table><h2 id="类型-1"><a href="#类型-1" class="headerlink" title="[]类型"></a>[]类型</h2><p>当一个变量声明为[]类型时，表示变量的值必须为空数组。如果隐式声明为[],则表示元素的类型为any，即任意类型的值。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a:[] = [];</span><br><span class="line">a = [<span class="number">1</span>]; <span class="comment">// Type '[number]' is not assignable to type '[]'.</span></span><br><span class="line"><span class="keyword">let</span> b = []; <span class="comment">// 隐式声明b为数组，元素类型是any类型</span></span><br><span class="line">b.push(<span class="number">1</span>);</span><br><span class="line">b.push(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h2 id="Tuples类型"><a href="#Tuples类型" class="headerlink" title="Tuples类型"></a>Tuples类型</h2><p>此类型是array的子类型，继承自array类型。Tuples类型的数组必须显式申明其元素的类型，且数组长度不可变。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明定长的数组</span></span><br><span class="line"><span class="keyword">let</span> arr: [string,number,boolean] = [<span class="string">'a'</span>,<span class="number">2</span>,<span class="literal">true</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维数组的声明</span></span><br><span class="line"><span class="comment">// 分步解释：</span></span><br><span class="line"><span class="comment">// let data: number[] 表示声明一个元素为数字的数组</span></span><br><span class="line"><span class="comment">// let data: [][] 表示声明一个元素为空数组的数组</span></span><br><span class="line"><span class="comment">// let data: [number, number][] 表示声明一个元素为两个元素的tuples类型的数组，且tuples的两个元素必须都为number类型</span></span><br><span class="line"><span class="comment">// let data: [number, number?][] 表示数组的第二个元素可选</span></span><br><span class="line"><span class="keyword">let</span> data: [number, number?][] = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>]];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明不定长数组，且指定第一个元素的类型，其他元素类型任意</span></span><br><span class="line"><span class="keyword">let</span> data1: [string,...any[]] = [<span class="string">'11'</span>,<span class="string">'s'</span>,<span class="number">32</span>];</span><br></pre></td></tr></table></figure><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>枚举类型主要处理两类事务：定义字符串到数字的映射或字符串到字符串的映射。TS会自动将枚举类型的每个成员映射到一个数字，默认是从0开始，也可是是显式定义数字，开始位置自己决定，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认从0开始</span></span><br><span class="line">enum lang &#123;Chinese, English, Russian&#125;; </span><br><span class="line"><span class="keyword">let</span> a = lang.Chinese;</span><br><span class="line"><span class="built_in">console</span>.log(a, lang.English, lang.Russian); <span class="comment">// 0, 1, 2</span></span><br><span class="line"><span class="comment">// 定义从3开始</span></span><br><span class="line">enum lang &#123;Chinese=<span class="number">3</span>, English, Russian&#125;; </span><br><span class="line"><span class="keyword">let</span> a = lang.Chinese;</span><br><span class="line"><span class="built_in">console</span>.log(a, lang.English, lang.Russian); <span class="comment">// 3, 4, 5</span></span><br><span class="line"><span class="comment">// 自定义或者自动赋值</span></span><br><span class="line">enum lang &#123;Chinese=<span class="number">3</span>, English=<span class="number">6</span>, Russian&#125;; </span><br><span class="line"><span class="keyword">let</span> a = lang.Chinese;</span><br><span class="line"><span class="built_in">console</span>.log(a, lang.English, lang.Russian); <span class="comment">// 3, 6, 7</span></span><br></pre></td></tr></table></figure><p>看枚举类型被TS转换后的形式，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lang;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">lang</span>) </span>&#123;</span><br><span class="line">    lang[lang[<span class="string">"Chinese"</span>] = <span class="number">3</span>] = <span class="string">"Chinese"</span>;</span><br><span class="line">    lang[lang[<span class="string">"English"</span>] = <span class="number">9</span>] = <span class="string">"English"</span>;</span><br><span class="line">    lang[lang[<span class="string">"Russian"</span>] = <span class="number">10</span>] = <span class="string">"Russian"</span>;</span><br><span class="line">&#125;)(lang || (lang = &#123;&#125;));</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>我们可以通过数字访问到字符串，通过字符串访问到数字，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(lang[<span class="string">'English'</span>], lang[lang.English]); <span class="comment">// 9 English</span></span><br></pre></td></tr></table></figure><h2 id="readonly修饰符"><a href="#readonly修饰符" class="headerlink" title="readonly修饰符"></a>readonly修饰符</h2><p>声明对象的某个属性为readonly</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: &#123;<span class="attr">a</span>:string, readonly b:number&#125; = &#123;<span class="attr">a</span>:<span class="string">'2'</span>, <span class="attr">b</span>:<span class="number">3</span>&#125;;</span><br><span class="line">a.b = <span class="number">4</span>; <span class="comment">// Cannot assign to 'b' because it is a read-only property.</span></span><br></pre></td></tr></table></figure><p>声明数组为只读</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">as</span>: readonly number[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">as</span>.push(<span class="number">2</span>); <span class="comment">// Property 'push' does not exist on type 'readonly number[]'.</span></span><br><span class="line"><span class="keyword">as</span>.concat(<span class="number">3</span>); <span class="comment">// concat函数不会对原数组修改，而是返回新的数组，所以此处合法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以这样声明</span></span><br><span class="line"><span class="keyword">let</span> arr: ReadonlyArray&lt;string&gt; = [<span class="string">'2'</span>];</span><br><span class="line">arr.push(<span class="string">'3'</span>); <span class="comment">// Property 'push' does not exist on type 'readonly string[]'.</span></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">let</span> arr: Readonly&lt;string[]&gt; = [<span class="string">'22'</span>];</span><br></pre></td></tr></table></figure><p>声明类的属性为只读。类的只读属性可以在声明的时候赋值，或者构造函数中赋值，其他地方都不允许赋值。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span>&#123;</span><br><span class="line">    readonly bar = <span class="number">1</span>;</span><br><span class="line">    readonly baz:string;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.baz = <span class="string">'hello'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    setBaz(value:string)&#123;</span><br><span class="line">        <span class="keyword">this</span>.baz = value; <span class="comment">// Cannot assign to 'baz' because it is a read-only property.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Foo().baz);</span><br></pre></td></tr></table></figure><h2 id="类型的组合"><a href="#类型的组合" class="headerlink" title="类型的组合"></a>类型的组合</h2><p>有时候某个变量的值可能需要取其他类型中的某一个类型，这时可以给此变量的类型设置为这些类型的并集，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> prop: string|number = <span class="number">3</span>;</span><br><span class="line">prop = <span class="string">'3'</span>; <span class="comment">// 可以被赋值，因为prop可以为string和number类型中的一个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组里可以是字符串也可以是数字</span></span><br><span class="line">type StringOrNumber = string|number;</span><br><span class="line"><span class="keyword">let</span> a: StringOrNumber[] = []; <span class="comment">// 或者直接这样：let a: (string|number)[] = [];</span></span><br><span class="line">a.push(<span class="number">1</span>);</span><br><span class="line">a.push(<span class="string">'a'</span>);</span><br><span class="line">a.push(<span class="literal">true</span>); <span class="comment">// 类型错误，不可以有布尔类型</span></span><br><span class="line"></span><br><span class="line">type Cat = &#123;<span class="attr">name</span>:string, <span class="attr">purrs</span>:boolean&#125;;</span><br><span class="line">type Dog = &#123;<span class="attr">name</span>:string, <span class="attr">barks</span>:boolean, <span class="attr">wags</span>:boolean&#125;</span><br><span class="line">type CatOrDogOrBoth = Cat|Dog;</span><br><span class="line"><span class="keyword">let</span> cat: CatOrDogOrBoth = &#123;<span class="attr">name</span>: <span class="string">'John'</span>, <span class="attr">purrs</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"><span class="comment">// 类型错误 &#123;name: 'John', barks: false&#125; 不属于Cat和Dog中的任何一个类型</span></span><br><span class="line"><span class="keyword">let</span> cat2: CatOrDogOrBoth = &#123;<span class="attr">name</span>: <span class="string">'John'</span>, <span class="attr">barks</span>: <span class="literal">false</span>&#125;; </span><br><span class="line"><span class="comment">// 类型错误，同上</span></span><br><span class="line"><span class="keyword">let</span> cat3: CatOrDogOrBoth = &#123;<span class="attr">name</span>: <span class="string">'John'</span>, <span class="attr">wags</span>: <span class="literal">false</span>&#125;;</span><br><span class="line"><span class="comment">// 类型错误， 同上</span></span><br><span class="line"><span class="keyword">let</span> cat4: CatOrDogOrBoth = &#123;<span class="attr">barks</span>: <span class="literal">true</span>, <span class="attr">wags</span>: <span class="literal">false</span>&#125;;</span><br><span class="line"><span class="comment">// 属于Cat类型，因为没有barks属性，即不是Dog类型，且完全拥有Cat类型定义的所有属性</span></span><br><span class="line"><span class="keyword">let</span> cat5: CatOrDogOrBoth = &#123;<span class="attr">name</span>: <span class="string">'John'</span>, <span class="attr">purrs</span>: <span class="literal">true</span>, <span class="attr">wags</span>: <span class="literal">false</span>&#125;;</span><br><span class="line"><span class="comment">// 既是Cat类型也是Dog类型</span></span><br><span class="line"><span class="keyword">let</span> cat6: CatOrDogOrBoth = &#123;<span class="attr">name</span>: <span class="string">'John'</span>, <span class="attr">barks</span>: <span class="literal">false</span>, <span class="attr">wags</span>: <span class="literal">false</span>, <span class="attr">purrs</span>:<span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;从typescript源文件到执行的过程&quot;&gt;&lt;a href=&quot;#从typescript源文件到执行的过程&quot; class=&quot;headerlink&quot; title=&quot;从typescript源文件到执行的过程&quot;&gt;&lt;/a&gt;从typescript源文件到执行的过程&lt;/h2&gt;
    
    </summary>
    
      <category term="code" scheme="https://ywxgod.github.io/blog/categories/code/"/>
    
    
      <category term="typescript" scheme="https://ywxgod.github.io/blog/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>004 - Symbols介绍</title>
    <link href="https://ywxgod.github.io/blog/2019/10/18/jsinfo/symbols/"/>
    <id>https://ywxgod.github.io/blog/2019/10/18/jsinfo/symbols/</id>
    <published>2019-10-17T17:56:49.101Z</published>
    <updated>2019-10-17T17:58:25.105Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对Symbol的三个认知："><a href="#对Symbol的三个认知：" class="headerlink" title="对Symbol的三个认知："></a>对Symbol的三个认知：</h2><ol><li>没有两个Symbol是相同的；</li><li>Symbol是一种简单类型，可以和字符串一样作为Object类型的键值，可以通过[ ]直接访问；</li><li>Symbol类型不可以隐式转换类型，且只可以进行显示调用sym.toString/String(sym)/Boolean(sym)进行转换，所以任何隐式转换的运算都会报错。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symbol1 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> symbol2 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">obj[symbol1] = <span class="number">1</span>;</span><br><span class="line">obj[symbol2] = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj[symbol1]); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[symbol2]); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> symbol1; <span class="comment">// 'symbol'</span></span><br><span class="line">symbol1 == symbol2; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">symbol1 + <span class="number">2</span>; <span class="comment">// TypeError</span></span><br><span class="line">symbol1.toString() + <span class="number">2</span>; <span class="comment">// 'Symbol()2'</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="创建Symbol的两种方法"><a href="#创建Symbol的两种方法" class="headerlink" title="创建Symbol的两种方法"></a>创建Symbol的两种方法</h2><ol><li>Symbol(‘description’) - description参数仅用与方便调试，toString时会输出。</li><li>Symbol.for(‘key’) - 相当于全局注册了一个Symbol，后续还可以找回来</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sym1 = <span class="built_in">Symbol</span>(<span class="string">'sym'</span>);</span><br><span class="line"><span class="keyword">const</span> sym2 = <span class="built_in">Symbol</span>(<span class="string">'sym'</span>);</span><br><span class="line">sym1 === sym2; <span class="comment">// false - 相同的description创建Symbol，也是不相等的。</span></span><br><span class="line"></span><br><span class="line">sym1 = <span class="built_in">Symbol</span>.for(<span class="string">'sym_for'</span>);</span><br><span class="line">sym2 = <span class="built_in">Symbol</span>.for(<span class="string">'sym_for'</span>);</span><br><span class="line">sym1 === sym2; <span class="comment">// true - 用同样的key</span></span><br></pre></td></tr></table></figure><p><strong>建议不要全局注册Symbol，因为很容易造成命名冲突。</strong></p><h2 id="遍历带有Symbol的对象"><a href="#遍历带有Symbol的对象" class="headerlink" title="遍历带有Symbol的对象"></a>遍历带有Symbol的对象</h2><p>Object.getOwnPropertyNames()只能获取对象的字符串类型的键值，要获取Symbol类型的键值可以用Object.getOwnPropertySymbols()，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    [<span class="built_in">Symbol</span>()]: <span class="number">3</span>,</span><br><span class="line">    name: <span class="string">'John'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(obj).forEach(<span class="function"><span class="params">i</span>=&gt;</span><span class="built_in">console</span>.log(i)); <span class="comment">// name</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertySymbols(obj).forEach(<span class="function"><span class="params">i</span>=&gt;</span><span class="built_in">console</span>.log(i)); <span class="comment">// Symbol()</span></span><br></pre></td></tr></table></figure><p>Reflect.ownKeys()可以一次获取到所有类型的键值，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> props = <span class="built_in">Reflect</span>.ownKeys(obj)</span><br><span class="line"><span class="built_in">console</span>.log(props); <span class="comment">//  ["name", Symbol()]</span></span><br></pre></td></tr></table></figure><h2 id="Symbol作为类的私有属性"><a href="#Symbol作为类的私有属性" class="headerlink" title="Symbol作为类的私有属性"></a>Symbol作为类的私有属性</h2><p>对于每一个私有属性，可以创建一个Symbol，因为在类外部无法感知类的实例有这个属性。虽然无法通过类的实例直接反问，但不过我们还是可以通过getOwnPropertySymbols拿到所有私有属性，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _x = <span class="built_in">Symbol</span>(<span class="string">'x'</span>);</span><br><span class="line"><span class="keyword">const</span> _y = <span class="built_in">Symbol</span>(<span class="string">'y'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span>(x=0,y=0)&#123;</span><br><span class="line">        <span class="keyword">this</span>[_x] = x;</span><br><span class="line">        <span class="keyword">this</span>[_y] = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pt = <span class="keyword">new</span> Point(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pt._x); <span class="comment">// undefined - 不存在_x属性</span></span><br><span class="line"><span class="keyword">let</span> symbols = <span class="built_in">Object</span>.getOwnPropertySymbols(pt);</span><br><span class="line">pt[symbols[<span class="number">0</span>]] = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(pt); <span class="comment">// Point &#123;Symbol(x): 3, Symbol(y): 2&#125; - 属性Symbol('x')的值已经改为3</span></span><br></pre></td></tr></table></figure><h2 id="Symbol的类型转换"><a href="#Symbol的类型转换" class="headerlink" title="Symbol的类型转换"></a>Symbol的类型转换</h2><table><thead><tr><th>转为目标类型</th><th>显示转换</th><th>隐式转换</th></tr></thead><tbody><tr><td>boolean</td><td>Boolean(sym) —&gt; OK</td><td>!sym —&gt; OK</td></tr><tr><td>number</td><td>Number(sym) —&gt; TypeError</td><td>3 * sym —&gt; TypeError</td></tr><tr><td>string</td><td>String(sym) —&gt; OK</td><td>‘’ + sym —&gt; TypeError</td></tr><tr><td></td><td>sym.toString() —&gt; OK</td><td><code>${sym}</code> —&gt; TypeError</td></tr></tbody></table><h2 id="Symbol-iterator"><a href="#Symbol-iterator" class="headerlink" title="Symbol.iterator"></a>Symbol.iterator</h2><p>Symbol.iterator一般是作为对象键值出现，且值为一个固定格式的函数。具有Symbol.iterator的对象，我们认为是一个可迭代的对象(iterable)，你可以用for…of进行遍历。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iterateOver</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> iterable = &#123;</span><br><span class="line">        [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        next() &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; args.length) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123; <span class="attr">value</span>: args[index++] &#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> iterable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>iterable的接口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">interface Iterable &#123;</span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]() : Iterator;</span><br><span class="line">&#125;</span><br><span class="line">interface Iterator &#123;</span><br><span class="line">    next() : IteratorResult;</span><br><span class="line">    <span class="keyword">return</span>?(value? : any) : IteratorResult;</span><br><span class="line">&#125;</span><br><span class="line">interface IteratorResult &#123;</span><br><span class="line">    value: any;</span><br><span class="line">    done: boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有其他内建Symbols，比如：</p><p>Symbol.toPrimitive<br>Symbol.hasInstance<br>Symbol.toStringTag<br>Symbol.isConcatSpreadable</p><p>等等……</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;对Symbol的三个认知：&quot;&gt;&lt;a href=&quot;#对Symbol的三个认知：&quot; class=&quot;headerlink&quot; title=&quot;对Symbol的三个认知：&quot;&gt;&lt;/a&gt;对Symbol的三个认知：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;没有两个Symbol是相同的；&lt;/li&gt;
&lt;li&gt;Symbol是一种简单类型，可以和字符串一样作为Object类型的键值，可以通过[ ]直接访问；&lt;/li&gt;
&lt;li&gt;Symbol类型不可以隐式转换类型，且只可以进行显示调用sym.toString/String(sym)/Boolean(sym)进行转换，所以任何隐式转换的运算都会报错。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; symbol1 = &lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; symbol2 = &lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; obj = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj[symbol1] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj[symbol2] = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj[symbol1]); &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj[symbol2]); &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; symbol1; &lt;span class=&quot;comment&quot;&gt;// &#39;symbol&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;symbol1 == symbol2; &lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;symbol1 + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// TypeError&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;symbol1.toString() + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// &#39;Symbol()2&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="重学JS" scheme="https://ywxgod.github.io/blog/categories/%E9%87%8D%E5%AD%A6JS/"/>
    
    
      <category term="code" scheme="https://ywxgod.github.io/blog/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>003 - JS类型转换</title>
    <link href="https://ywxgod.github.io/blog/2019/10/17/jsinfo/type_conversion/"/>
    <id>https://ywxgod.github.io/blog/2019/10/17/jsinfo/type_conversion/</id>
    <published>2019-10-16T18:37:31.406Z</published>
    <updated>2019-10-16T18:40:39.589Z</updated>
    
    <content type="html"><![CDATA[<p>JS的类型一般有String，Number，Boolean，Symbol，null，undefined，Object这几种，其中前四种可以认为是简单类型，Object是复杂类型（包括Array，Date等），中间两种自成一体。</p><p>我们都知道JS是弱类型的语言，所以难免会进行类型转换，而转换又有显式和隐式之分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> == <span class="literal">null</span><span class="comment">// false</span></span><br><span class="line"><span class="number">2</span> / <span class="string">'5'</span><span class="comment">// 0.4</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'3'</span>)<span class="comment">// 3</span></span><br><span class="line"><span class="number">1</span> === <span class="literal">null</span><span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>第一，二行会进行隐式转换，第三行是显式转换，而第四行不会转换类型。这里先讨论隐式转换，无论是简单类型还是复杂类型，隐式转为最后都会转为boolean，string或者number中的一种。</p><h2 id="什么时候会进行隐式转换，又会转为什么类型"><a href="#什么时候会进行隐式转换，又会转为什么类型" class="headerlink" title="什么时候会进行隐式转换，又会转为什么类型"></a>什么时候会进行隐式转换，又会转为什么类型</h2><a id="more"></a><ol><li><p>不同类型进行算术运算时会进行隐式转换，常用算术操作：+-*/</p><p>+：当有一个操作数是字符串时，另一个被转为字符串；都不是字符串时，则全部转为数字。<br>-*/：全部转为数字</p></li><li><p>不同类型进行比较操作时会进行隐式转换，常用比较操作：&gt; &lt; = &gt;= &lt;= != == !== ===</p><p>字符串：当两边都是字符串时，不转换。<br>只要有一边不是字符串，则全部转为数字进行比较。</p></li><li><p>作为函数参数传递时会根据参数类型进行隐式转换。</p></li></ol><h2 id="如何进行转换"><a href="#如何进行转换" class="headerlink" title="如何进行转换"></a>如何进行转换</h2><h3 id="简单类型的转换"><a href="#简单类型的转换" class="headerlink" title="简单类型的转换"></a>简单类型的转换</h3><h4 id="转为字符串"><a href="#转为字符串" class="headerlink" title="转为字符串"></a>转为字符串</h4><p>转字符串主要方法是：String(value)，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>(<span class="number">123</span>)                   <span class="comment">// '123'</span></span><br><span class="line"><span class="built_in">String</span>(<span class="number">-12.3</span>)                 <span class="comment">// '-12.3'</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">null</span>)                  <span class="comment">// 'null'</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">undefined</span>)             <span class="comment">// 'undefined'</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">true</span>)                  <span class="comment">// 'true'</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">false</span>)                 <span class="comment">// 'false'</span></span><br><span class="line"><span class="built_in">String</span>(<span class="built_in">Symbol</span>(<span class="string">'mySymbol'</span>))<span class="comment">// 'Symbol(mySymbol)'</span></span><br></pre></td></tr></table></figure><p>简单类型转为字符串，基本是看到什么就转为什么。</p><h4 id="转为布尔值"><a href="#转为布尔值" class="headerlink" title="转为布尔值"></a>转为布尔值</h4><p>转布尔值的主要方法是：Boolean(value)，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(<span class="string">''</span>)           <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">0</span>)            <span class="comment">// false     </span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">-0</span>)           <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">NaN</span>)          <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">null</span>)         <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">undefined</span>)    <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">false</span>)        <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>除了上面的布尔值转换，其他任何简单类型(其实也包括复杂类型)的布尔值转换都为true。</p><h4 id="转为数字"><a href="#转为数字" class="headerlink" title="转为数字"></a>转为数字</h4><p>转为数字类型的主要方法是：Number(value), 如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>)                   <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>)              <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>)                   <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">false</span>)                  <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">" 12 "</span>)                 <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">"-12.34"</span>)               <span class="comment">// -12.34</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">"\n"</span>)                   <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">" 12s "</span>)                <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="number">123</span>)                    <span class="comment">// 123</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="built_in">Symbol</span>(<span class="string">'my symbol'</span>))   <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><p>基本规则：</p><table><thead><tr><th>Value</th><th>Becomes</th></tr></thead><tbody><tr><td>undefined</td><td>NaN</td></tr><tr><td>null</td><td>0</td></tr><tr><td>true/false</td><td>1/0</td></tr><tr><td>string</td><td>去掉开头和结尾的空格后，如果字符串为空，转换为0，否则，用Number()转换剩下的字符</td></tr></tbody></table><p>注意：Symbol类型不能转为数字，所以Symbol类型除了做加法，其他任何运算都会报错。做加法时，Symbol会被转换为字符串。另外转数字的方法还有：+value，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+<span class="string">'3'</span><span class="comment">// 3</span></span><br><span class="line">+<span class="string">'a'</span><span class="comment">// NaN</span></span><br><span class="line">+<span class="literal">true</span><span class="comment">// 1</span></span><br><span class="line">+<span class="keyword">new</span> <span class="built_in">Date</span>() <span class="comment">// timestamp 等价于Date.now()</span></span><br></pre></td></tr></table></figure><h3 id="复杂类型的转换"><a href="#复杂类型的转换" class="headerlink" title="复杂类型的转换"></a>复杂类型的转换</h3><h4 id="转为布尔值-1"><a href="#转为布尔值-1" class="headerlink" title="转为布尔值"></a>转为布尔值</h4><p>任何复杂类型，包括空对象空数组，全部转为true。</p><h4 id="转为字符串或数字"><a href="#转为字符串或数字" class="headerlink" title="转为字符串或数字"></a>转为字符串或数字</h4><p>转为字符串和数字，则是由 Symbol.toPrimitive 函数决定，此函数接收一个参数hint，必须返回简单数据类型的值，具体规则如下：</p><ol><li>如果存在的话，调用obj<a href="hint">Symbol.toPrimitive</a>。如果toPrimitive返回的不是简单类型，则抛出TypeError。</li><li>如果不存在，则根据hint，如果hint是string类型，则调用obj.toString()，如果toString()返回的是简单类型，则返回此结果并结束；如果toString()返回的不是简单类型，则调用obj.valueOf(), 如果valueOf()返回的是简单类型，则返回此结果并结束；如果valueOf()返回的不是简单类型，则抛出TypeError。如果hint是number，则跟string想反，先调用valueOf(),然后尝试toString()</li></ol><p>如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// toPrimitive返回复杂类型</span></span><br><span class="line">user = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  money: <span class="number">1000</span>,</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`User &#123;name: <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, money: <span class="subst">$&#123;<span class="keyword">this</span>.money&#125;</span>&#125;`</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  valueOf() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  [<span class="built_in">Symbol</span>.toPrimitive](hint) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hint：%s'</span>, hint);</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;; <span class="comment">// 返回复杂类型</span></span><br><span class="line">    <span class="comment">//return hint == "string" ? `User &#123;name: "$&#123;this.name&#125;"&#125;` : this.money;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">alert(user); <span class="comment">//输出hint为string后，抛出TypeError，因为toPrimitive返回的不是简单类型</span></span><br><span class="line"><span class="built_in">console</span>.log(user);</span><br><span class="line"><span class="built_in">console</span>.log(+user);</span><br><span class="line"><span class="built_in">console</span>.log(user+<span class="number">500</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(user));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// toPrimitive根据hint类型返回简单类型</span></span><br><span class="line">user = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  money: <span class="number">1000</span>,</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`User &#123;name: <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, money: <span class="subst">$&#123;<span class="keyword">this</span>.money&#125;</span>&#125;`</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  valueOf() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  [<span class="built_in">Symbol</span>.toPrimitive](hint) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hint：%s'</span>, hint);</span><br><span class="line">    <span class="keyword">return</span> hint == <span class="string">"string"</span> ? <span class="string">`User &#123;name: "<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>"&#125;`</span> : <span class="keyword">this</span>.money;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">alert(user);<span class="comment">// hint输出为string，所以alert输出：User &#123;name: "John"&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(user);<span class="comment">// <span class="doctag">TODO:</span>///既没调用toPrimitive,也没调用toString，此处未知log函数内部如何转换user</span></span><br><span class="line"><span class="built_in">console</span>.log(+user);<span class="comment">//1000 hint输出为number，所以返回this.money</span></span><br><span class="line"><span class="built_in">console</span>.log(user+<span class="number">500</span>); <span class="comment">//1500 hint输出为default， 所以返回this.money</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不存在toPrimitive，且valueOf返回复杂类型，toString返回简单类型</span></span><br><span class="line">user = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  money: <span class="number">1000</span>,</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`User &#123;name: <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, money: <span class="subst">$&#123;<span class="keyword">this</span>.money&#125;</span>&#125;`</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  valueOf() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">alert(user); <span class="comment">// 直接调用toString返回</span></span><br><span class="line"><span class="built_in">console</span>.log(user); <span class="comment">//</span></span><br><span class="line"><span class="built_in">console</span>.log(+user);<span class="comment">// 先调用valueOf，然后调用toString，然后再转为数字，结果为NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(user+<span class="number">500</span>); <span class="comment">// 先调用toString，然后再与500相连。</span></span><br></pre></td></tr></table></figure><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li>运算前请显示转换类型，运算时最好不要让JS自己隐式转换。</li><li>如果显示转换还是不保险，那就先判断类型，再根据情况运算。如何判断类型？？？？:elephant:</li></ol><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""</span> + <span class="number">1</span> + <span class="number">0</span> = <span class="string">"10"</span></span><br><span class="line"><span class="string">""</span> - <span class="number">1</span> + <span class="number">0</span> = <span class="number">-1</span></span><br><span class="line"><span class="literal">true</span> + <span class="literal">false</span> = <span class="number">1</span></span><br><span class="line"><span class="number">6</span> / <span class="string">"3"</span> = <span class="number">2</span></span><br><span class="line"><span class="string">"2"</span> * <span class="string">"3"</span> = <span class="number">6</span></span><br><span class="line"><span class="number">4</span> + <span class="number">5</span> + <span class="string">"px"</span> = <span class="string">"9px"</span></span><br><span class="line"><span class="string">"$"</span> + <span class="number">4</span> + <span class="number">5</span> = <span class="string">"$45"</span></span><br><span class="line"><span class="string">"4"</span> - <span class="number">2</span> = <span class="number">2</span></span><br><span class="line"><span class="string">"4px"</span> - <span class="number">2</span> = <span class="literal">NaN</span></span><br><span class="line"><span class="number">7</span> / <span class="number">0</span> = <span class="literal">Infinity</span></span><br><span class="line"><span class="string">" -9  "</span> + <span class="number">5</span> = <span class="string">" -9  5"</span></span><br><span class="line"><span class="string">" -9  "</span> - <span class="number">5</span> = <span class="number">-14</span></span><br><span class="line"><span class="literal">null</span> + <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="literal">undefined</span> + <span class="number">1</span> = <span class="literal">NaN</span></span><br><span class="line"><span class="string">" \t \n"</span> - <span class="number">2</span> = <span class="number">-2</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> &gt; <span class="number">4</span></span><br><span class="line"><span class="string">"apple"</span> &gt; <span class="string">"pineapple"</span></span><br><span class="line"><span class="string">"2"</span> &gt; <span class="string">"12"</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span></span><br><span class="line"><span class="literal">undefined</span> === <span class="literal">null</span></span><br><span class="line"><span class="literal">null</span> == <span class="string">"\n0\n"</span></span><br><span class="line"><span class="literal">null</span> === +<span class="string">"\n0\n"</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] &gt; <span class="literal">null</span></span><br><span class="line"><span class="string">"foo"</span> + + <span class="string">"bar"</span></span><br><span class="line"><span class="string">'true'</span> == <span class="literal">true</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">'false'</span></span><br><span class="line"><span class="literal">null</span> == <span class="string">''</span></span><br><span class="line">!!<span class="string">"false"</span> == !!<span class="string">"true"</span></span><br><span class="line">[‘x’] == ‘x’</span><br><span class="line">[] + <span class="literal">null</span> + <span class="number">1</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] == [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#123;&#125;+[]+&#123;&#125;+[<span class="number">1</span>]</span><br><span class="line">!+[]+[]+![]</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>) - <span class="number">0</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>) + <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""</span> + <span class="number">1</span> + <span class="number">0</span> = <span class="string">"10"</span> <span class="comment">// 只要有一个字符串，加号另一边也转为字符串</span></span><br><span class="line"><span class="string">""</span> - <span class="number">1</span> + <span class="number">0</span> = <span class="number">-1</span> <span class="comment">// 减号两边会分别转为数字</span></span><br><span class="line"><span class="literal">true</span> + <span class="literal">false</span> = <span class="number">1</span><span class="comment">// 非字符串相加，则都转为数字</span></span><br><span class="line"><span class="number">6</span> / <span class="string">"3"</span> = <span class="number">2</span><span class="comment">// 除法两边转为数字</span></span><br><span class="line"><span class="string">"2"</span> * <span class="string">"3"</span> = <span class="number">6</span><span class="comment">// 乘法同除法</span></span><br><span class="line"><span class="number">4</span> + <span class="number">5</span> + <span class="string">"px"</span> = <span class="string">"9px"</span><span class="comment">// 先算数字加法得9，然后再连接字符串</span></span><br><span class="line"><span class="string">"$"</span> + <span class="number">4</span> + <span class="number">5</span> = <span class="string">"$45"</span><span class="comment">// 先连接前两个操作数，然后用前面的结果连接第三个</span></span><br><span class="line"><span class="string">"4"</span> - <span class="number">2</span> = <span class="number">2</span><span class="comment">// 减号两边转数字</span></span><br><span class="line"><span class="string">"4px"</span> - <span class="number">2</span> = <span class="literal">NaN</span><span class="comment">// 先分别转数字，‘4px’转数字后为NaN</span></span><br><span class="line"><span class="number">7</span> / <span class="number">0</span> = <span class="literal">Infinity</span><span class="comment">// 除零得无穷大</span></span><br><span class="line"><span class="string">" -9  "</span> + <span class="number">5</span> = <span class="string">" -9  5"</span> <span class="comment">// 只要有一个字符串，加号另一边也转为字符串</span></span><br><span class="line"><span class="string">" -9  "</span> - <span class="number">5</span> = <span class="number">-14</span> <span class="comment">// 先转数字，第一个操作数转为-9</span></span><br><span class="line"><span class="literal">null</span> + <span class="number">1</span> = <span class="number">1</span> <span class="comment">// 先转数字，null转数字后为0</span></span><br><span class="line"><span class="literal">undefined</span> + <span class="number">1</span> = <span class="literal">NaN</span> <span class="comment">// 先转数字，undefined转数字后为NaN</span></span><br><span class="line"><span class="string">" \t \n"</span> - <span class="number">2</span> = <span class="number">-2</span> <span class="comment">// 先转数字，第一个操作数转数字后为0</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> &gt; <span class="number">4</span><span class="comment">// true 不转换</span></span><br><span class="line"><span class="string">"apple"</span> &gt; <span class="string">"pineapple"</span>  <span class="comment">// false 不转换</span></span><br><span class="line"><span class="string">"2"</span> &gt; <span class="string">"12"</span> <span class="comment">// true 不转换</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span>  <span class="comment">// true null只与undefined或自身相等(==)</span></span><br><span class="line"><span class="literal">undefined</span> === <span class="literal">null</span>  <span class="comment">// false 不同类型</span></span><br><span class="line"><span class="literal">null</span> == <span class="string">"\n0\n"</span>  <span class="comment">// false null只与undefined自身相等(==)</span></span><br><span class="line"><span class="literal">null</span> === +<span class="string">"\n0\n"</span>  <span class="comment">// false 类型不同</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两边先分别转数字，数组属于复杂类型，所以先判断是否有toPrimitive。</span></span><br><span class="line"><span class="comment"> * 数组对象并不存在Symbol.toPrimitive方法，所以调用valueOf方法，但数组的valueOf方法返回的是其本身，</span></span><br><span class="line"><span class="comment"> * 即，非简单类型，所以继续调用toString，所以返回的是字符串'1', 继而转为数字1，而null转为数字0</span></span><br><span class="line"><span class="comment"> * 所以结果是true</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">[<span class="number">1</span>] &gt; <span class="literal">null</span><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 先算一元运算+'bar'，得到NaN，所以结果是foo与NaN相连得到'fooNaN'</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="string">"foo"</span> + + <span class="string">"bar"</span> <span class="comment">// 'fooNaN'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 先两边转数字，得到 NaN和1，所以结果为false</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="string">'true'</span> == <span class="literal">true</span>  <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">'false'</span> <span class="comment">// 同上</span></span><br><span class="line"><span class="literal">null</span> == <span class="string">''</span><span class="comment">// false null只等于undefined或自身</span></span><br><span class="line">!!<span class="string">"false"</span> == !!<span class="string">"true"</span> <span class="comment">// 先分别转为boolean值，然后再比较，非空字符串转布尔值为true，所以两边都是true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 参考第一个，数组最终会转为'x',而另一边也是'x',所以是字符串比较，无需再转换，即'x'=='x'</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">[‘x’] == ‘x’     <span class="comment">//true </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* []+null+1 =&gt; ''+null+1 =&gt; 'null'+1 =&gt; 'null1'</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">[] + <span class="literal">null</span> + <span class="number">1</span> <span class="comment">// null1</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] == [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="comment">// false 引用的内存地址不同</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* &#123;&#125;+[]+&#123;&#125;+[1]</span></span><br><span class="line"><span class="comment">* =&gt; +[]+&#123;&#125;+[1]  //第一个&#123;&#125;被当成了块语句，所以直接忽略,正在计算是从+[]开始</span></span><br><span class="line"><span class="comment">* =&gt; 0+&#123;&#125;+[1]    //+[]被转为数字0</span></span><br><span class="line"><span class="comment">* =&gt; 0+'[object Object]'+[1]  //&#123;&#125; 先调用valueOf，发现返回本身，再调用toString，所以返回[object Object]</span></span><br><span class="line"><span class="comment">* =&gt; '0[object Object]'+[1]</span></span><br><span class="line"><span class="comment">* =&gt; '0[object Object]1'      // [1] 先调用valueOf，返回本身，再调用toString，返回1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#123;&#125;+[]+&#123;&#125;+[<span class="number">1</span>] <span class="comment">// '0[object Object]1'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据优先级拆分为 (!+[])+[]+(![])</span></span><br><span class="line"><span class="comment">* =&gt; !0+[]+false</span></span><br><span class="line"><span class="comment">* =&gt; true+[]+false</span></span><br><span class="line"><span class="comment">* =&gt; true+''+false</span></span><br><span class="line"><span class="comment">* =&gt; 'truefalse'</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">!+[]+[]+![] <span class="comment">//'truefalse'</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>) - <span class="number">0</span>  <span class="comment">// 0 调用Date的valueOf转为数字，valueOf返回的是0</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>) + <span class="number">0</span>  <span class="comment">// Thu Jan 01 1970 02:00:00 GMT+0200 (EET)0 调用Date的toString方法转为字符串再加0</span></span><br></pre></td></tr></table></figure><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><ol><li><a href="http://javascript.info/type-conversions" target="_blank" rel="noopener">http://javascript.info/type-conversions</a> </li><li><a href="http://javascript.info/comparison" target="_blank" rel="noopener">http://javascript.info/comparison</a> </li><li><a href="http://javascript.info/object-toprimitive" target="_blank" rel="noopener">http://javascript.info/object-toprimitive</a> </li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive</a> </li><li><a href="https://www.freecodecamp.org/news/js-type-coercion-explained-27ba3d9a2839/" target="_blank" rel="noopener">https://www.freecodecamp.org/news/js-type-coercion-explained-27ba3d9a2839/</a> </li><li><a href="https://2ality.com/2013/04/quirk-implicit-conversion.html" target="_blank" rel="noopener">https://2ality.com/2013/04/quirk-implicit-conversion.html</a> </li><li><a href="https://wtfjs.com/" target="_blank" rel="noopener">https://wtfjs.com/</a> </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS的类型一般有String，Number，Boolean，Symbol，null，undefined，Object这几种，其中前四种可以认为是简单类型，Object是复杂类型（包括Array，Date等），中间两种自成一体。&lt;/p&gt;
&lt;p&gt;我们都知道JS是弱类型的语言，所以难免会进行类型转换，而转换又有显式和隐式之分。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; == &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;			&lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; / &lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;				&lt;span class=&quot;comment&quot;&gt;// 0.4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;)			&lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; === &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;			&lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一，二行会进行隐式转换，第三行是显式转换，而第四行不会转换类型。这里先讨论隐式转换，无论是简单类型还是复杂类型，隐式转为最后都会转为boolean，string或者number中的一种。&lt;/p&gt;
&lt;h2 id=&quot;什么时候会进行隐式转换，又会转为什么类型&quot;&gt;&lt;a href=&quot;#什么时候会进行隐式转换，又会转为什么类型&quot; class=&quot;headerlink&quot; title=&quot;什么时候会进行隐式转换，又会转为什么类型&quot;&gt;&lt;/a&gt;什么时候会进行隐式转换，又会转为什么类型&lt;/h2&gt;
    
    </summary>
    
      <category term="重学JS" scheme="https://ywxgod.github.io/blog/categories/%E9%87%8D%E5%AD%A6JS/"/>
    
    
      <category term="code" scheme="https://ywxgod.github.io/blog/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>002 - 比较操作注意点</title>
    <link href="https://ywxgod.github.io/blog/2019/10/15/jsinfo/comparions/"/>
    <id>https://ywxgod.github.io/blog/2019/10/15/jsinfo/comparions/</id>
    <published>2019-10-14T17:25:18.554Z</published>
    <updated>2019-10-14T17:32:38.797Z</updated>
    
    <content type="html"><![CDATA[<p>记录自己比较容易忘记的概念和内容，方便以后查阅。原文请参考： <a href="http://javascript.info/comparison" target="_blank" rel="noopener">http://javascript.info/comparison</a> </p><p>比较操作包括：&gt;，&lt;，&gt;=，&lt;=，==，===，!=，!==</p><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><p>字符串的比较是将每个字符分别比较，而比较字符的时候用的是字典顺序，准确的说应该是每个字符的unicode的编码顺序。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">'a'</span>&lt;<span class="string">'b'</span>); <span class="comment">// true</span></span><br><span class="line">alert(<span class="string">'apple'</span>&lt;<span class="string">'bus'</span>); <span class="comment">//true</span></span><br><span class="line">alert(<span class="string">'who'</span>&lt;<span class="string">'whois'</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="两个字符串比较算法："><a href="#两个字符串比较算法：" class="headerlink" title="两个字符串比较算法："></a>两个字符串比较算法：</h3><ol><li><p>Compare the first character of both strings.<br>比较两者的第一个字符</p></li><li><p>If the first character from the first string is greater (or less) than the other string’s, then the first string is greater (or less) than the second. We’re done.<br>如果前者的第一个字符大于(或小于)后者的第一个字符，则前者大于(或小于)后者。结束比较。</p></li><li><p>Otherwise, if both strings’ first characters are the same, compare the second characters the same way.<br>否则，如果他们的第一个字符相同，那么分别取第二个字符进行比较</p></li><li><p>Repeat until the end of either string.<br>重复上面的操作，直到一个字符串结束。</p></li><li><p>If both strings end at the same length, then they are equal. Otherwise, the longer string is greater.<br>如果两个字符串长度相同，那么两者相等。否则，长度较长的字符串大。</p></li></ol><h3 id="不同类型数据比较"><a href="#不同类型数据比较" class="headerlink" title="不同类型数据比较"></a>不同类型数据比较</h3><p>当比较操作两边的数据不同类型时，操作数都会转为数字类型，然后进行比较。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'2'</span>&gt;<span class="number">1</span>); <span class="comment">// true '2'被转为数字2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'01'</span>==<span class="number">1</span>); <span class="comment">// true '01'被转为数字1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span>==<span class="number">1</span>); <span class="comment">// true true被转为数字1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span>==<span class="string">'0'</span>); <span class="comment">//true false被转为0，‘0’被转0</span></span><br></pre></td></tr></table></figure><h3 id="与"><a href="#与" class="headerlink" title="== 与 ==="></a>== 与 ===</h3><p>== 比较时会将操作数进行类型转换，而===不会转换操作数的类型，对于===只有类型不同即不相等。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert( <span class="number">0</span> === <span class="literal">false</span> ); <span class="comment">// false 类型不同</span></span><br><span class="line">alert( <span class="number">0</span> == <span class="literal">false</span> ); <span class="comment">// true false会被转为数字0</span></span><br></pre></td></tr></table></figure><h3 id="null与undefined的比较"><a href="#null与undefined的比较" class="headerlink" title="null与undefined的比较"></a>null与undefined的比较</h3><ol><li>避免用null，undefined去跟其他数据类型进行比较，特别是用全等比较，切记避免。</li><li>对于全等比较，null不等于undefined，因为类型不同。</li><li>对于非全等比较，null只等于undefined，或者undefined只等于null，它俩互相相等，而不和其他任何数相等。<br>There’s a special rule. These two are a “sweet couple”: they equal each other (in the sense of <code>==</code>), but not any other value. </li><li>null转为数字是0，undefined转为数字是NaN</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alert( <span class="literal">null</span> &gt; <span class="number">0</span> );  <span class="comment">// (1) false</span></span><br><span class="line">alert( <span class="literal">null</span> == <span class="number">0</span> ); <span class="comment">// (2) false</span></span><br><span class="line">alert( <span class="literal">null</span> &gt;= <span class="number">0</span> ); <span class="comment">// (3) true</span></span><br><span class="line">alert( <span class="literal">undefined</span> &gt; <span class="number">0</span> ); <span class="comment">// (4) false</span></span><br><span class="line">alert( <span class="literal">undefined</span> &lt; <span class="number">0</span> ); <span class="comment">// (5) false</span></span><br><span class="line">alert( <span class="literal">undefined</span> == <span class="number">0</span> ); <span class="comment">// (6) false</span></span><br></pre></td></tr></table></figure><p>(1) - null被转为数字0，所以null&gt;0为false<br>(2) - 用非全等比较时，null只与undefined相等，不与其他任何数相等。<br>(3) - null被转为数字0，所以null&gt;=0为true<br>(4) - undefined被转为NaN，所以NaN&gt;0为false，NaN与任何数比较都返回false。<br>(5) - 同(4)<br>(6) - 用非全等比较时，undefined只与null相等，不与其他任何数相等。</p><p>以上这些奇怪的比较行为，我们在写代码过程中应该尽量避免。特别是对null和undefined的比较要特别注意。</p><h2 id="习题："><a href="#习题：" class="headerlink" title="习题："></a>习题：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> &gt; <span class="number">4</span></span><br><span class="line"><span class="string">"apple"</span> &gt; <span class="string">"pineapple"</span></span><br><span class="line"><span class="string">"2"</span> &gt; <span class="string">"12"</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span></span><br><span class="line"><span class="literal">undefined</span> === <span class="literal">null</span></span><br><span class="line"><span class="literal">null</span> == <span class="string">"\n0\n"</span></span><br><span class="line"><span class="literal">null</span> === +<span class="string">"\n0\n"</span></span><br></pre></td></tr></table></figure><h2 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> &gt; <span class="number">4</span> → <span class="literal">true</span></span><br><span class="line"><span class="string">"apple"</span> &gt; <span class="string">"pineapple"</span> → <span class="literal">false</span></span><br><span class="line"><span class="string">"2"</span> &gt; <span class="string">"12"</span> → <span class="literal">true</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span> → <span class="literal">true</span></span><br><span class="line"><span class="literal">undefined</span> === <span class="literal">null</span> → <span class="literal">false</span></span><br><span class="line"><span class="literal">null</span> == <span class="string">"\n0\n"</span> → <span class="literal">false</span></span><br><span class="line"><span class="literal">null</span> === +<span class="string">"\n0\n"</span> → <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录自己比较容易忘记的概念和内容，方便以后查阅。原文请参考： &lt;a href=&quot;http://javascript.info/comparison&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://javascript.info/comparison&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;比较操作包括：&amp;gt;，&amp;lt;，&amp;gt;=，&amp;lt;=，==，===，!=，!==&lt;/p&gt;
&lt;h3 id=&quot;字符串比较&quot;&gt;&lt;a href=&quot;#字符串比较&quot; class=&quot;headerlink&quot; title=&quot;字符串比较&quot;&gt;&lt;/a&gt;字符串比较&lt;/h3&gt;&lt;p&gt;字符串的比较是将每个字符分别比较，而比较字符的时候用的是字典顺序，准确的说应该是每个字符的unicode的编码顺序。如：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;string&quot;&gt;&#39;apple&#39;&lt;/span&gt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&#39;bus&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;string&quot;&gt;&#39;who&#39;&lt;/span&gt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&#39;whois&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="重学JS" scheme="https://ywxgod.github.io/blog/categories/%E9%87%8D%E5%AD%A6JS/"/>
    
    
      <category term="JS操作符" scheme="https://ywxgod.github.io/blog/tags/JS%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>mongoose如何清除collections</title>
    <link href="https://ywxgod.github.io/blog/2019/10/14/mongoose/drop_collections/"/>
    <id>https://ywxgod.github.io/blog/2019/10/14/mongoose/drop_collections/</id>
    <published>2019-10-14T15:32:49.969Z</published>
    <updated>2019-10-14T15:40:53.953Z</updated>
    
    <content type="html"><![CDATA[<p>服务器启动时，初始化了一些静态数据，当服务器退出时可能需要清掉这些数据，所以看看如何清除MongoDB的collections。</p><h2 id="清除collections的几种方法："><a href="#清除collections的几种方法：" class="headerlink" title="清除collections的几种方法："></a>清除collections的几种方法：</h2><ol><li><h3 id="通过connection-collections，如："><a href="#通过connection-collections，如：" class="headerlink" title="通过connection.collections，如："></a>通过connection.collections，如：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> collectionName = <span class="string">'users'</span>;</span><br><span class="line"><span class="keyword">this</span>.connection.collections[collectionName].drop() <span class="comment">//drop方法清除名称为users的collection</span></span><br></pre></td></tr></table></figure></li></ol><a id="more"></a>    <ol start="2"><li><h3 id="通过connection-dropCollection方法，如："><a href="#通过connection-dropCollection方法，如：" class="headerlink" title="通过connection.dropCollection方法，如："></a>通过connection.dropCollection方法，如：</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 通过调用dropCollection方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> collectionName = <span class="string">'users'</span>;</span><br><span class="line"><span class="keyword">this</span>.connection.dropCollection(collectionName).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res); <span class="comment">//true</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//res 为true表示删除成功</span></span><br></pre></td></tr></table></figure></li><li><h3 id="通过Model-collection，-如："><a href="#通过Model-collection，-如：" class="headerlink" title="通过Model.collection， 如："></a>通过Model.collection， 如：</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> collectionName = <span class="string">'user'</span>;</span><br><span class="line"><span class="keyword">let</span> UserSchema = <span class="keyword">new</span> mongoose.Schema(&#123;&#125;);</span><br><span class="line"><span class="keyword">let</span> UserModel = <span class="keyword">this</span>.connection.model(collectionName, UserSchema);</span><br><span class="line">UserModel.collections.drop(); <span class="comment">//删除collections</span></span><br></pre></td></tr></table></figure></li></ol><p>假如我们要在nodejs进程退出之前清除数据库里的临时数据，可以像下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clearUsers</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> collectionName = <span class="string">'users'</span>;</span><br><span class="line">    <span class="keyword">this</span>.connection.dropCollection(collectionName).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res); <span class="comment">//true</span></span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">process.on(<span class="string">'SIGINT'</span>, () =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//退出前清除初始化数据</span></span><br><span class="line">    <span class="keyword">this</span>.clearUsers();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//连接关闭时的事件</span></span><br><span class="line">    <span class="keyword">this</span>.connection.close( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 如果在此处调用将无效，因为数据库连接已经断开。</span></span><br><span class="line">        <span class="comment">// this.clearUsers(); </span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Mongoose disconnected through app termination'</span>);</span><br><span class="line">        process.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;服务器启动时，初始化了一些静态数据，当服务器退出时可能需要清掉这些数据，所以看看如何清除MongoDB的collections。&lt;/p&gt;
&lt;h2 id=&quot;清除collections的几种方法：&quot;&gt;&lt;a href=&quot;#清除collections的几种方法：&quot; class=&quot;headerlink&quot; title=&quot;清除collections的几种方法：&quot;&gt;&lt;/a&gt;清除collections的几种方法：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;h3 id=&quot;通过connection-collections，如：&quot;&gt;&lt;a href=&quot;#通过connection-collections，如：&quot; class=&quot;headerlink&quot; title=&quot;通过connection.collections，如：&quot;&gt;&lt;/a&gt;通过connection.collections，如：&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; collectionName = &lt;span class=&quot;string&quot;&gt;&#39;users&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.connection.collections[collectionName].drop() &lt;span class=&quot;comment&quot;&gt;//drop方法清除名称为users的collection&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="code" scheme="https://ywxgod.github.io/blog/categories/code/"/>
    
    
      <category term="mongoose" scheme="https://ywxgod.github.io/blog/tags/mongoose/"/>
    
  </entry>
  
  <entry>
    <title>001 - JS操作符注意点</title>
    <link href="https://ywxgod.github.io/blog/2019/10/13/jsinfo/operators/"/>
    <id>https://ywxgod.github.io/blog/2019/10/13/jsinfo/operators/</id>
    <published>2019-10-13T03:59:19.489Z</published>
    <updated>2019-10-13T04:34:45.045Z</updated>
    
    <content type="html"><![CDATA[<p>记录自己比较容易忘记的概念和内容，方便以后查阅。原文请参考：<a href="http://javascript.info/operators" target="_blank" rel="noopener">http://javascript.info/operators</a></p><h3 id="二元运算符"><a href="#二元运算符" class="headerlink" title="二元运算符(+/-*)"></a>二元运算符(+/-*)</h3><p>对于 + 运算符，只要有一个操作数是字符串，将会另外一个也转为字符串，如：<br>The rule is simple: if either operand is a string, the other one is converted into a string as well </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">'my'</span>+<span class="string">'string'</span>;</span><br><span class="line">alert(s); <span class="comment">// mystring</span></span><br><span class="line">alert(<span class="string">'1'</span>+<span class="number">2</span>); <span class="comment">//'12'</span></span><br><span class="line">alert(<span class="number">2</span>+<span class="string">'1'</span>); <span class="comment">//'21'</span></span><br><span class="line">alert(<span class="number">2</span>+<span class="number">2</span>+<span class="string">'1'</span>); <span class="comment">//'41' and not '221'</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>其他运算符(/-*)只会对数字进行运算，所以它们会先将非数字的操作数转为数字，然后再运算，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="number">2</span>-<span class="string">'1'</span>); <span class="comment">//1</span></span><br><span class="line">alert(<span class="string">'2'</span>-<span class="string">'1'</span>); <span class="comment">//1</span></span><br><span class="line">alert(<span class="string">'3'</span><span class="number">-1</span>); <span class="comment">//2</span></span><br><span class="line">alert(<span class="string">'5'</span>/<span class="number">2</span>); <span class="comment">//2.5</span></span><br><span class="line">alert(<span class="string">'3'</span>*<span class="number">3</span>); <span class="comment">//9</span></span><br></pre></td></tr></table></figure><h3 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符(+)"></a>一元运算符(+)</h3><p>对于一元运算符 + ，当操作数为数字时，不会操作数字。当不是数字时，将会转为数字，相当于Number(…)，如：<br>The unary plus or, in other words, the plus operator <code>+</code> applied to a single value, doesn’t do anything to numbers. But if the operand is not a number, the unary plus converts it into a number. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">alert(+<span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">-2</span>;</span><br><span class="line">alert(+y); <span class="comment">// -2</span></span><br><span class="line">alert(+<span class="literal">true</span>); <span class="comment">// 1</span></span><br><span class="line">alert(+<span class="string">''</span>); <span class="comment">// 0</span></span><br><span class="line">alert(+<span class="string">'3'</span>++<span class="string">'4'</span>); <span class="comment">// Uncaught SyntaxError: Invalid left-hand side expression in postfix operation</span></span><br><span class="line">alert(+<span class="string">'3'</span>+ +<span class="string">'4'</span>); <span class="comment">// 7 一元运算符优先级高于二元运算符</span></span><br></pre></td></tr></table></figure><h3 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符(=)"></a>赋值操作符(=)</h3><p>赋值运算优先级低于二元运算。赋值运算可以链式执行，且会返回最左端变量的值，如：<br>The call x = value writes the value into x and then returns it.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a, b, c, d;</span><br><span class="line">a = b = c = <span class="number">2</span>+<span class="number">2</span>;</span><br><span class="line">alert(a); <span class="comment">// 4</span></span><br><span class="line">alert(b); <span class="comment">// 4</span></span><br><span class="line">alert(c); <span class="comment">// 4</span></span><br><span class="line">alert(d = <span class="number">2</span>+<span class="number">5</span>); <span class="comment">//7 先将2+5的值赋值给d，然后返回d的值传给alert</span></span><br></pre></td></tr></table></figure><h3 id="求幂运算符"><a href="#求幂运算符" class="headerlink" title="求幂运算符(**)"></a>求幂运算符(**)</h3><p>求幂运算符是ES6新增的特性，a**b表示将a进行b次相乘，返回相乘后的结果。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="number">2</span>**<span class="number">3</span>); <span class="comment">// 8 2的3次方</span></span><br><span class="line">alert(<span class="number">4</span>**<span class="number">5</span>); <span class="comment">// 1024 4的5次方</span></span><br><span class="line">alert(<span class="number">8</span>**(<span class="number">1</span>/<span class="number">3</span>)); <span class="comment">// 2 8的1/3次方</span></span><br></pre></td></tr></table></figure><h3 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符( , )"></a>逗号运算符( , )</h3><p>逗号运算符最常见在被压缩后的js代码中。<br>逗号运算会从左到右计算每个表达式的值，最后返回最右边一个的值，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = (<span class="number">1</span>+<span class="number">2</span>, <span class="number">3</span>+<span class="number">4</span>); <span class="comment">//将a赋值给一个逗号表达式</span></span><br><span class="line">alert(a); <span class="comment">// 7 a取最右边的表达式的值</span></span><br></pre></td></tr></table></figure><p>逗号表达式的优先级很低，比赋值运算还要低，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>+<span class="number">2</span>, <span class="number">3</span>+<span class="number">4</span>;</span><br><span class="line">alert(a); <span class="comment">// 3 先运算1+2=3，再将3赋值给a，忽略3+4，再将a的值传给alert</span></span><br><span class="line"><span class="keyword">let</span> s = a=<span class="number">1</span>+<span class="number">2</span>,<span class="number">3</span>+<span class="number">4</span>;</span><br><span class="line">alert(s); <span class="comment">// 7 传给alert的值是逗号表达式(3,7)的返回值,所以相当于alert(7)</span></span><br></pre></td></tr></table></figure><h2 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h2><table><thead><tr><th>operand</th><th>n. [计] 操作数；[计] 运算对象</th></tr></thead><tbody><tr><td>operator</td><td>n. 操作符</td></tr><tr><td>unary</td><td>n. 一元操作符</td></tr><tr><td>binary</td><td>n. 二元操作符</td></tr><tr><td>terminology</td><td>n. 术语，术语学；用辞</td></tr><tr><td>operator precedence</td><td>英 /ˈpresɪdəns/ n. 运算符优先级</td></tr></tbody></table><h2 id="句子"><a href="#句子" class="headerlink" title="句子"></a>句子</h2><ol><li>Let’s grasp some common terminology.<br>让我们掌握一些常用术语。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录自己比较容易忘记的概念和内容，方便以后查阅。原文请参考：&lt;a href=&quot;http://javascript.info/operators&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://javascript.info/operators&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;二元运算符&quot;&gt;&lt;a href=&quot;#二元运算符&quot; class=&quot;headerlink&quot; title=&quot;二元运算符(+/-*)&quot;&gt;&lt;/a&gt;二元运算符(+/-*)&lt;/h3&gt;&lt;p&gt;对于 + 运算符，只要有一个操作数是字符串，将会另外一个也转为字符串，如：&lt;br&gt;The rule is simple: if either operand is a string, the other one is converted into a string as well &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; s = &lt;span class=&quot;string&quot;&gt;&#39;my&#39;&lt;/span&gt;+&lt;span class=&quot;string&quot;&gt;&#39;string&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(s); &lt;span class=&quot;comment&quot;&gt;// mystring&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//&#39;12&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;+&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//&#39;21&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;+&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//&#39;41&#39; and not &#39;221&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="重学JS" scheme="https://ywxgod.github.io/blog/categories/%E9%87%8D%E5%AD%A6JS/"/>
    
    
      <category term="JS操作符" scheme="https://ywxgod.github.io/blog/tags/JS%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>样式代码结构参考</title>
    <link href="https://ywxgod.github.io/blog/2019/10/11/css/style_categories/"/>
    <id>https://ywxgod.github.io/blog/2019/10/11/css/style_categories/</id>
    <published>2019-10-10T19:32:59.543Z</published>
    <updated>2019-08-29T01:28:12.397Z</updated>
    
    <content type="html"><![CDATA[<h3 id="结构参考"><a href="#结构参考" class="headerlink" title="结构参考"></a>结构参考</h3><ul><li>一般性样式<ol><li>主体样式</li><li>reset样式</li><li>链接</li><li>标题</li><li>其他元素</li></ol></li><li>辅助样式<ol><li>表单</li><li>通知和错误</li><li>一致的条目</li></ol></li><li>页面结构<ol><li>头部、页脚和导航</li><li>布局</li><li>其他页面结构元素</li></ol></li><li>页面组件<ol><li>各个页面模块</li></ol></li><li>覆盖<br>使用统一的大块注释分割每个部分如：<a id="more"></a><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @group general styles</span></span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------- */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* @group helper styles</span></span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------- */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* @group page structure</span></span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------- */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* @group page modules</span></span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------- */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* @group overrides</span></span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------- */</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="特殊性"><a href="#特殊性" class="headerlink" title="特殊性"></a>特殊性</h3><p>特殊性分4个等级：a,b,c,d.</p><ul><li>如果样式是行内样式，a=1.</li><li>b等于ID选择器的总数</li><li>c等于类，伪类和属性选择器的数量</li><li>d等于元素和伪元素的数量</li></ul><table><thead><tr><th style="text-align:left">选择器</th><th style="text-align:center">特殊性</th><th style="text-align:right">特殊值</th></tr></thead><tbody><tr><td style="text-align:left">Style=””</td><td style="text-align:center">1,0,0,0</td><td style="text-align:right">1000</td></tr><tr><td style="text-align:left">#wrapper #content {}</td><td style="text-align:center">0,2,0,0</td><td style="text-align:right">200</td></tr><tr><td style="text-align:left">#wrapper .date {}</td><td style="text-align:center">0,1,1,0</td><td style="text-align:right">110</td></tr><tr><td style="text-align:left">div#content {}</td><td style="text-align:center">0,1,0,1</td><td style="text-align:right">101</td></tr><tr><td style="text-align:left">#content {}</td><td style="text-align:center">0,1,0,0</td><td style="text-align:right">100</td></tr><tr><td style="text-align:left">p.content .date {}</td><td style="text-align:center">0,0,2,1</td><td style="text-align:right">21</td></tr><tr><td style="text-align:left">p.content {}</td><td style="text-align:center">0,0,1,1</td><td style="text-align:right">11</td></tr><tr><td style="text-align:left">p div {}</td><td style="text-align:center">0,0,0,2</td><td style="text-align:right">2</td></tr><tr><td style="text-align:left">p {}</td><td style="text-align:center">0,0,0,1</td><td style="text-align:right">1</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;结构参考&quot;&gt;&lt;a href=&quot;#结构参考&quot; class=&quot;headerlink&quot; title=&quot;结构参考&quot;&gt;&lt;/a&gt;结构参考&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一般性样式&lt;ol&gt;
&lt;li&gt;主体样式&lt;/li&gt;
&lt;li&gt;reset样式&lt;/li&gt;
&lt;li&gt;链接&lt;/li&gt;
&lt;li&gt;标题&lt;/li&gt;
&lt;li&gt;其他元素&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;辅助样式&lt;ol&gt;
&lt;li&gt;表单&lt;/li&gt;
&lt;li&gt;通知和错误&lt;/li&gt;
&lt;li&gt;一致的条目&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;页面结构&lt;ol&gt;
&lt;li&gt;头部、页脚和导航&lt;/li&gt;
&lt;li&gt;布局&lt;/li&gt;
&lt;li&gt;其他页面结构元素&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;页面组件&lt;ol&gt;
&lt;li&gt;各个页面模块&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;覆盖&lt;br&gt;使用统一的大块注释分割每个部分如：
    
    </summary>
    
      <category term="code" scheme="https://ywxgod.github.io/blog/categories/code/"/>
    
    
      <category term="css" scheme="https://ywxgod.github.io/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>mongoose链接数据库时的两个警告处理</title>
    <link href="https://ywxgod.github.io/blog/2019/10/11/mongoose/mongoose_issues/"/>
    <id>https://ywxgod.github.io/blog/2019/10/11/mongoose/mongoose_issues/</id>
    <published>2019-10-10T19:32:59.543Z</published>
    <updated>2019-09-26T18:10:04.658Z</updated>
    
    <content type="html"><![CDATA[<p>通过正常情况启动mongoose（mongoose版本为5.7.1，node.js版本为12.10.0）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uri = <span class="string">'mongodb://localhost:27017/blog_db'</span>;</span><br><span class="line"><span class="keyword">const</span> options = &#123;<span class="attr">useNewUrlParser</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"><span class="keyword">async</span> connect()&#123;</span><br><span class="line">    <span class="keyword">let</span> connection = mongoose.createConnection();</span><br><span class="line"><span class="keyword">this</span>.addEvents(connection);</span><br><span class="line"><span class="keyword">return</span> connection.openUri(uri, options);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> connection = <span class="keyword">await</span> connect();</span><br></pre></td></tr></table></figure><p>启动后控制台会出现以下警告：<a id="more"></a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(node:6248) DeprecationWarning: current Server Discovery and Monitoring engine is deprecated, and will be removed in a future version. To use the new Server Discover and Monitoring engine, pass option &#123; useUnifiedTopology: true &#125; to the MongoClient constructor.</span><br><span class="line">Mongoose connected to mongodb://localhost:27017/blog_db</span><br><span class="line">(node:6248) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.</span><br></pre></td></tr></table></figure><p>根据提示，添加 useUnifiedTopology: true到连接选项，即可消除第一个警告</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,  <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><p>添加 useCreateIndex: true 消除第二个警告：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = &#123;<span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,  <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>, <span class="attr">useCreateIndex</span>: <span class="literal">true</span>&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过正常情况启动mongoose（mongoose版本为5.7.1，node.js版本为12.10.0）&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; uri = &lt;span class=&quot;string&quot;&gt;&#39;mongodb://localhost:27017/blog_db&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; options = &amp;#123;&lt;span class=&quot;attr&quot;&gt;useNewUrlParser&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; connect()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; connection = mongoose.createConnection();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.addEvents(connection);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; connection.openUri(uri, options);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; connection = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; connect();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;启动后控制台会出现以下警告：
    
    </summary>
    
      <category term="code" scheme="https://ywxgod.github.io/blog/categories/code/"/>
    
    
      <category term="mongoose" scheme="https://ywxgod.github.io/blog/tags/mongoose/"/>
    
  </entry>
  
  <entry>
    <title>Canvas中文本的定位</title>
    <link href="https://ywxgod.github.io/blog/2019/10/11/canvas/canvas_text_position/"/>
    <id>https://ywxgod.github.io/blog/2019/10/11/canvas/canvas_text_position/</id>
    <published>2019-10-10T19:32:59.528Z</published>
    <updated>2019-08-19T15:44:23.727Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道canvas中绘制文本主要有两个方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.strokeText(<span class="string">'text'</span>,x,y);</span><br><span class="line">ctx.fillText(<span class="string">'text'</span>,x,y);</span><br></pre></td></tr></table></figure><p>text - 需要绘制的文本<br>x - 文本的x坐标<br>y - 文本的y坐标</p><p>但是文本本身有宽度高度，所以要精确定位文本仅仅知道坐标还不行，还得知道坐标对应于文本本身的哪个点。<br>用Flash的概念来说，就是我们还需要知道文本的注册点在哪里。</p><p>canvas中有两个属性来设置文本的注册点：<strong>textAlign</strong>和<strong>textBaseline</strong><br><a id="more"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.textAlign = <span class="string">"left"</span> || <span class="string">"right"</span> || <span class="string">"center"</span> || <span class="string">"start"</span> || <span class="string">"end"</span>;</span><br><span class="line">ctx.textBaseline = <span class="string">"top"</span> || <span class="string">"hanging"</span> || <span class="string">"middle"</span> || <span class="string">"alphabetic"</span> || <span class="string">"ideographic"</span> || <span class="string">"bottom"</span>;</span><br></pre></td></tr></table></figure><p>textAlign表示文本在水平方向上的对齐方式，默认值为left。<br>textBaseline表示文本在垂直方向的对齐方式，默认值为alphabetic。</p><p><img src="/blog/css/images/canvas_text_pos.png" alt="textAlign与textBaseline具体的表现"></p><p>从上图可以看到textAlign和textBaseline是如何影响文本的位置的，接下来处理文本对齐的问题。</p><p>让文本在canvas上居中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">context.font = <span class="string">'38px sans-serif'</span>;</span><br><span class="line">context.textAlign = <span class="string">'center'</span>;</span><br><span class="line">context.textBaseline = <span class="string">'middle'</span>;</span><br><span class="line">context.strokeStyle = <span class="string">'blue'</span>;</span><br><span class="line">context.strokeText(<span class="string">'What can I do for you?'</span>, canvas.width/<span class="number">2</span>,canvas.height/<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>textAlign,textBaseline分别设置为center,middle相当于将文本的注册点移动到了文本本身的中间位置，<br>所以绘制的时候只要设置坐标为canvas的中间位置即可。</p><p>如果将文本的注册点设置到文本的左上角，即start/top。<br>此时要居中文本得知道文本得高度和宽度，然后算出文本的坐标：</p><p>x = canvas.width/2-textWidth/2;<br>y = canvas.height/2-textHeight/2;</p><p>虽然measureText可以拿到文本的大概宽度，但无法获取文本的高度，<br>所以如果将注册点设置到左上角，要想居中对齐文本就没有那么精确了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道canvas中绘制文本主要有两个方法：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ctx.strokeText(&lt;span class=&quot;string&quot;&gt;&#39;text&#39;&lt;/span&gt;,x,y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ctx.fillText(&lt;span class=&quot;string&quot;&gt;&#39;text&#39;&lt;/span&gt;,x,y);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;text - 需要绘制的文本&lt;br&gt;x - 文本的x坐标&lt;br&gt;y - 文本的y坐标&lt;/p&gt;
&lt;p&gt;但是文本本身有宽度高度，所以要精确定位文本仅仅知道坐标还不行，还得知道坐标对应于文本本身的哪个点。&lt;br&gt;用Flash的概念来说，就是我们还需要知道文本的注册点在哪里。&lt;/p&gt;
&lt;p&gt;canvas中有两个属性来设置文本的注册点：&lt;strong&gt;textAlign&lt;/strong&gt;和&lt;strong&gt;textBaseline&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="重学JS" scheme="https://ywxgod.github.io/blog/categories/%E9%87%8D%E5%AD%A6JS/"/>
    
    
      <category term="canvas" scheme="https://ywxgod.github.io/blog/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>Canvas大小的设定</title>
    <link href="https://ywxgod.github.io/blog/2019/10/11/canvas/canvas_size_intro/"/>
    <id>https://ywxgod.github.io/blog/2019/10/11/canvas/canvas_size_intro/</id>
    <published>2019-10-10T19:32:59.528Z</published>
    <updated>2019-08-19T15:44:23.726Z</updated>
    
    <content type="html"><![CDATA[<p>通常设置canvas大小有两种方法:</p><ol><li>通过css设置width与height</li><li>通过canvas标签的属性width与height设置</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.canvas</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"150"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><p>两种方法的区别：<br><a id="more"></a></p><ol><li>通过css设置时值需要带上单位，如px；通过属性设置时不需要单位，只要一个非负整数。</li><li>通过css设置大小时，只设置了canvas元素(HTMLCanvasElement)的大小；通过属性设置时同时设置了canvas元素的大小和canvas绘图表面的大小。</li><li>当两种方法设置的大小不相同时，浏览器会将绘图表面大小缩放到canvas元素的大小。</li></ol><p>同样的绘制代码，设置canvas大小不同，效果不一样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">context.font = <span class="string">'20px sans-serif'</span>;</span><br><span class="line">context.textAlign = <span class="string">'start'</span>;</span><br><span class="line">context.textBaseline = <span class="string">'top'</span>;</span><br><span class="line">context.strokeStyle = <span class="string">'blue'</span>;</span><br><span class="line">context.strokeText(<span class="string">'What can I do for you?'</span>, <span class="number">0</span>,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><img src="/blog/css/images/canvas_size_prop.png" alt="未通过css设置大小时的效果"></p><p><img src="/blog/css/images/canvas_size_css.png" alt="通过css设置大小，且与canvas属性设置的大小不一样时的效果"></p><p>第二图，canvas属性设置为(300,150),css设置为(600,300)。<br>所以绘图表面比元素小，此时浏览器将绘图表面拉伸到了canvas元素的大小，文本看上去被放大了。</p><p>由于上面的区别，所以鼠标在canvas上点击时，要获取鼠标相对于canvas左上角的坐标，需要考虑这个放大系数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">canvas.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> bbox = canvas.getBoundingClientRect();</span><br><span class="line">    <span class="keyword">let</span> x = e.clientX - bbox.left*(canvas.width/bbox.width);</span><br><span class="line">    <span class="keyword">let</span> y = e.clientY - bbox.top*(canvas.height/bbox.height);</span><br><span class="line">    <span class="keyword">return</span> &#123;x,y&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常设置canvas大小有两种方法:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过css设置width与height&lt;/li&gt;
&lt;li&gt;通过canvas标签的属性width与height设置&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.canvas&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;600px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;300px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;300&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;150&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;两种方法的区别：&lt;br&gt;
    
    </summary>
    
      <category term="重学JS" scheme="https://ywxgod.github.io/blog/categories/%E9%87%8D%E5%AD%A6JS/"/>
    
    
      <category term="canvas" scheme="https://ywxgod.github.io/blog/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>css基础知识</title>
    <link href="https://ywxgod.github.io/blog/2019/10/11/css/css_foundation/"/>
    <id>https://ywxgod.github.io/blog/2019/10/11/css/css_foundation/</id>
    <published>2019-10-10T19:32:59.528Z</published>
    <updated>2019-09-01T09:59:15.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="普通说明"><a href="#普通说明" class="headerlink" title="普通说明"></a>普通说明</h2><ul><li>普通文档流中的块框外边距会叠加，但行内块，浮动框，绝对定位的块是不会叠加的。</li><li>修改行内框的唯一方式是修改行高或者水平边框、外边距、内边距。</li><li>inline-block让元素按照行内框水平排列，但可以设置其宽度高端。</li><li>相对定位是相对于自身在文档流中的初始位置，绝对定位是相对于距离它最近的已定位祖先元素。</li><li>已定位元素是指position值为relative，absolute或者fixed。</li></ul><h2 id="背景图像效果"><a href="#背景图像效果" class="headerlink" title="背景图像效果"></a>背景图像效果</h2><h3 id="基本知识点"><a href="#基本知识点" class="headerlink" title="基本知识点"></a>基本知识点</h3><h4 id="默认情况，背景图像会被水平和垂直地重复显示。"><a href="#默认情况，背景图像会被水平和垂直地重复显示。" class="headerlink" title="默认情况，背景图像会被水平和垂直地重复显示。"></a>默认情况，背景图像会被水平和垂直地重复显示。</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(https://www.baidu.com/img/bd_logo1.png)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="背景垂直渐变"><a href="#背景垂直渐变" class="headerlink" title="背景垂直渐变"></a>背景垂直渐变</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">1. 可以创建一张1像素宽，最够长的图像在x方向重复平铺</span></span><br><span class="line"><span class="comment">2. 将背景色设置为渐变色的最后一个颜色</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(/img/gradient.gif); <span class="comment">/** width=1,height=1000 */</span></span><br><span class="line">    <span class="attribute">background-repeat</span>: repeat-x;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>; <span class="comment">/** 图片上最后的渐变色 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="固定宽高图片的显示"><a href="#固定宽高图片的显示" class="headerlink" title="固定宽高图片的显示"></a>固定宽高图片的显示</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#branding</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">700px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(/img/branding.gif);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="给指定元素增加图标"><a href="#给指定元素增加图标" class="headerlink" title="给指定元素增加图标"></a>给指定元素增加图标</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(/img/icon/doc.gif);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="comment">/** 水平方向定位在左侧，垂直方向居中显示 */</span></span><br><span class="line">    <span class="attribute">background-position</span>: left center; </span><br><span class="line">    <span class="comment">/** 还可以用百分百实现上面一样的效果，两者用其一 */</span></span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">50%</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>background-position用像素为单位时，相对于元素的左上角。用百分百时，是将相对于图像左上角百分百位置的点设置到相对于父元素左上角百分百位置的点上。</p><h2 id="对链接应用样式"><a href="#对链接应用样式" class="headerlink" title="对链接应用样式"></a>对链接应用样式</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>:link, :visited 需放置于:hover, :active, :focus之前，否则会被覆盖而不起作用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * a:link 没有访问过的链接 </span></span><br><span class="line"><span class="comment"> * a:visited 访问过的链接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * a:hover 悬停</span></span><br><span class="line"><span class="comment"> * a:focus tab移动，获取焦点</span></span><br><span class="line"><span class="comment"> * a:active 被激活的链接，激活发生在链接被点击时</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下划线自定义"><a href="#下划线自定义" class="headerlink" title="下划线自定义"></a>下划线自定义</h3><p>可以用下边框替代，进而可以使用边框背景图</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 用下边框替代下划线 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> dotted <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">    <span class="attribute">border-bottom-style</span>: solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 用背景图替换下划线 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'https://www.baidu.com/img/baidu_jgylogo3.gif'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="给链接目标添加样式"><a href="#给链接目标添加样式" class="headerlink" title="给链接目标添加样式"></a>给链接目标添加样式</h3><p>链接目标是被锚点链接到的元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.target-element-selector</span><span class="selector-pseudo">:target</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="区分不同类型的链接"><a href="#区分不同类型的链接" class="headerlink" title="区分不同类型的链接"></a>区分不同类型的链接</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 通过属性选择器查找链接到外部页面的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href^='http:']</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 邮箱链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href^='mailto:']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 区分可下载的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href$='.pdf']</span>,<span class="selector-tag">a</span><span class="selector-attr">[href$='.doc']</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="创建按钮"><a href="#创建按钮" class="headerlink" title="创建按钮"></a>创建按钮</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">6.6em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#66a300</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#8cca12</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;普通说明&quot;&gt;&lt;a href=&quot;#普通说明&quot; class=&quot;headerlink&quot; title=&quot;普通说明&quot;&gt;&lt;/a&gt;普通说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;普通文档流中的块框外边距会叠加，但行内块，浮动框，绝对定位的块是不会叠加的。&lt;/li&gt;
&lt;li&gt;修改行内框的唯一方式是修改行高或者水平边框、外边距、内边距。&lt;/li&gt;
&lt;li&gt;inline-block让元素按照行内框水平排列，但可以设置其宽度高端。&lt;/li&gt;
&lt;li&gt;相对定位是相对于自身在文档流中的初始位置，绝对定位是相对于距离它最近的已定位祖先元素。&lt;/li&gt;
&lt;li&gt;已定位元素是指position值为relative，absolute或者fixed。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;背景图像效果&quot;&gt;&lt;a href=&quot;#背景图像效果&quot; class=&quot;headerlink&quot; title=&quot;背景图像效果&quot;&gt;&lt;/a&gt;背景图像效果&lt;/h2&gt;&lt;h3 id=&quot;基本知识点&quot;&gt;&lt;a href=&quot;#基本知识点&quot; class=&quot;headerlink&quot; title=&quot;基本知识点&quot;&gt;&lt;/a&gt;基本知识点&lt;/h3&gt;&lt;h4 id=&quot;默认情况，背景图像会被水平和垂直地重复显示。&quot;&gt;&lt;a href=&quot;#默认情况，背景图像会被水平和垂直地重复显示。&quot; class=&quot;headerlink&quot; title=&quot;默认情况，背景图像会被水平和垂直地重复显示。&quot;&gt;&lt;/a&gt;默认情况，背景图像会被水平和垂直地重复显示。&lt;/h4&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background-image&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;(https://www.baidu.com/img/bd_logo1.png)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="code" scheme="https://ywxgod.github.io/blog/categories/code/"/>
    
    
      <category term="css" scheme="https://ywxgod.github.io/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>用verdaccio搭建个人用npm私服</title>
    <link href="https://ywxgod.github.io/blog/2019/10/11/use_verdaccio/"/>
    <id>https://ywxgod.github.io/blog/2019/10/11/use_verdaccio/</id>
    <published>2019-10-10T19:32:59.512Z</published>
    <updated>2019-08-19T15:44:23.736Z</updated>
    
    <content type="html"><![CDATA[<p>Verdaccio 这个怎么发音？什么意思？谷歌给出的解释：</p><blockquote><p><b><a href="https://verdaccio.org/" target="_blank" rel="noopener">Verdaccio</a></b> is an Italian name for the mixture of black, white, and yellow pigments resulting in a grayish or yellowish (depending on the proportion) soft greenish brown.</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装 - -"></a>安装 - -</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g verdaccio</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verdaccio</span><br></pre></td></tr></table></figure><p>会看到下面的输出表示安装成功。<br><code>warn --- config file  - C:\Users\flasher\AppData\Roaming\verdaccio\config.yaml</code><br><code>warn --- Plugin successfully loaded: htpasswd</code><br><code>warn --- Plugin successfully loaded: audit</code><br><code>warn --- http address - http://localhost:4873/ - verdaccio/3.10.1</code></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This is the default config file. It allows all users to do anything,</span></span><br><span class="line"><span class="comment"># so don't use it on production systems.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Look here for more config file examples:</span></span><br><span class="line"><span class="comment"># https://github.com/verdaccio/verdaccio/tree/master/conf</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># path to a directory with all packages</span></span><br><span class="line">storage: ./storage</span><br><span class="line"><span class="comment"># path to a directory with plugins to include</span></span><br><span class="line">plugins: ./plugins</span><br><span class="line"></span><br><span class="line">web:</span><br><span class="line">  <span class="comment"># WebUI is enabled as default, if you want disable it, just uncomment this line</span></span><br><span class="line">  <span class="comment">#enable: false  # 是否启用web服务，通过web查看现有发布的私有库</span></span><br><span class="line">  title: Verdaccio</span><br><span class="line"></span><br><span class="line">auth:</span><br><span class="line">  htpasswd:</span><br><span class="line">    file: ./htpasswd</span><br><span class="line">    <span class="comment"># Maximum amount of users allowed to register, defaults to "+inf".</span></span><br><span class="line">    <span class="comment"># You can set this to -1 to disable registration.</span></span><br><span class="line">    max_users: <span class="number">-1</span> <span class="comment"># 默认值为1000，此处改为-1表示禁用用户注册</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a list of other known repositories we can talk to</span></span><br><span class="line">uplinks:</span><br><span class="line">  npmjs:</span><br><span class="line">  <span class="comment"># 当安装的包服务器没有缓存，需要去上游下载时的npm包地址</span></span><br><span class="line">  <span class="comment"># 常用的地址还有很多</span></span><br><span class="line">    url: https://registry.npmjs.org/</span><br><span class="line"></span><br><span class="line">packages:</span><br><span class="line">  <span class="string">'@*/*'</span>:</span><br><span class="line">    <span class="comment"># scoped packages</span></span><br><span class="line">    access: $all</span><br><span class="line">    publish: $authenticated <span class="comment">#以@开头的包需要用户认证才可以发布</span></span><br><span class="line">    proxy: npmjs</span><br><span class="line"></span><br><span class="line">  <span class="string">'**'</span>:</span><br><span class="line">    <span class="comment"># allow all users (including non-authenticated users) to read and</span></span><br><span class="line">    <span class="comment"># publish all packages</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># you can specify usernames/groupnames (depending on your auth plugin)</span></span><br><span class="line">    <span class="comment"># and three keywords: "$all", "$anonymous", "$authenticated"</span></span><br><span class="line">    access: $all</span><br><span class="line"></span><br><span class="line">    <span class="comment"># allow all known users to publish packages</span></span><br><span class="line">    <span class="comment"># (anyone can register by default, remember?)</span></span><br><span class="line">    publish: $authenticated</span><br><span class="line"></span><br><span class="line">    <span class="comment"># if package is not available locally, proxy requests to 'npmjs' registry</span></span><br><span class="line">    proxy: npmjs</span><br><span class="line"></span><br><span class="line"><span class="comment"># To use `npm audit` uncomment the following section</span></span><br><span class="line">middlewares:</span><br><span class="line">  audit:</span><br><span class="line">    enabled: true</span><br><span class="line"></span><br><span class="line"><span class="comment"># log settings</span></span><br><span class="line">logs:</span><br><span class="line">  - &#123;type: stdout, format: pretty, level: http&#125;</span><br><span class="line">  <span class="comment">#- &#123;type: file, path: verdaccio.log, level: info&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 局域网内访问地址，不然只能本机访问</span></span><br><span class="line">listen: <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">4873</span></span><br></pre></td></tr></table></figure><p>跑起来后的样子如图：</p><p><img src="/blog/css/images/run_vaderccio.jpg" alt="alt text" title="运行结果"></p>]]></content>
    
    <summary type="html">
    
      几乎零配置的npm私服，轻量，使用简单，个人使用
    
    </summary>
    
      <category term="code" scheme="https://ywxgod.github.io/blog/categories/code/"/>
    
    
      <category term="npm" scheme="https://ywxgod.github.io/blog/tags/npm/"/>
    
      <category term="node.js" scheme="https://ywxgod.github.io/blog/tags/node-js/"/>
    
  </entry>
  
</feed>
