<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Anything is possible</title>
  
  <subtitle>明月清风随意取，青山绿水任遨游</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://ywxgod.github.io/blog/"/>
  <updated>2019-09-01T09:55:48.641Z</updated>
  <id>https://ywxgod.github.io/blog/</id>
  
  <author>
    <name>wyin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>css基础知识</title>
    <link href="https://ywxgod.github.io/blog/2019/09/01/css/css_foundation/"/>
    <id>https://ywxgod.github.io/blog/2019/09/01/css/css_foundation/</id>
    <published>2019-09-01T09:53:09.587Z</published>
    <updated>2019-09-01T09:55:48.641Z</updated>
    
    <content type="html"><![CDATA[<h2 id="普通说明"><a href="#普通说明" class="headerlink" title="普通说明"></a>普通说明</h2><ul><li>普通文档流中的块框外边距会叠加，但行内块，浮动框，绝对定位的块是不会叠加的。</li><li>修改行内框的唯一方式是修改行高或者水平边框、外边距、内边距。</li><li>inline-block让元素按照行内框水平排列，但可以设置其宽度高端。</li><li>相对定位是相对于自身在文档流中的初始位置，绝对定位是相对于距离它最近的已定位祖先元素。</li><li>已定位元素是指position值为relative，absolute或者fixed。</li></ul><h2 id="背景图像效果"><a href="#背景图像效果" class="headerlink" title="背景图像效果"></a>背景图像效果</h2><h3 id="基本知识点"><a href="#基本知识点" class="headerlink" title="基本知识点"></a>基本知识点</h3><h4 id="默认情况，背景图像会被水平和垂直地重复显示。"><a href="#默认情况，背景图像会被水平和垂直地重复显示。" class="headerlink" title="默认情况，背景图像会被水平和垂直地重复显示。"></a>默认情况，背景图像会被水平和垂直地重复显示。</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(https://www.baidu.com/img/bd_logo1.png)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="背景垂直渐变"><a href="#背景垂直渐变" class="headerlink" title="背景垂直渐变"></a>背景垂直渐变</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">1. 可以创建一张1像素宽，最够长的图像在x方向重复平铺</span></span><br><span class="line"><span class="comment">2. 将背景色设置为渐变色的最后一个颜色</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(/img/gradient.gif); <span class="comment">/** width=1,height=1000 */</span></span><br><span class="line">    <span class="attribute">background-repeat</span>: repeat-x;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>; <span class="comment">/** 图片上最后的渐变色 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="固定宽高图片的显示"><a href="#固定宽高图片的显示" class="headerlink" title="固定宽高图片的显示"></a>固定宽高图片的显示</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#branding</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">700px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(/img/branding.gif);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="给指定元素增加图标"><a href="#给指定元素增加图标" class="headerlink" title="给指定元素增加图标"></a>给指定元素增加图标</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(/img/icon/doc.gif);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="comment">/** 水平方向定位在左侧，垂直方向居中显示 */</span></span><br><span class="line">    <span class="attribute">background-position</span>: left center; </span><br><span class="line">    <span class="comment">/** 还可以用百分百实现上面一样的效果，两者用其一 */</span></span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">50%</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>background-position用像素为单位时，相对于元素的左上角。用百分百时，是将相对于图像左上角百分百位置的点设置到相对于父元素左上角百分百位置的点上。</p><h2 id="对链接应用样式"><a href="#对链接应用样式" class="headerlink" title="对链接应用样式"></a>对链接应用样式</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>:link, :visited 需放置于:hover, :active, :focus之前，否则会被覆盖而不起作用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * a:link 没有访问过的链接 </span></span><br><span class="line"><span class="comment"> * a:visited 访问过的链接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * a:hover 悬停</span></span><br><span class="line"><span class="comment"> * a:focus tab移动，获取焦点</span></span><br><span class="line"><span class="comment"> * a:active 被激活的链接，激活发生在链接被点击时</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下划线自定义"><a href="#下划线自定义" class="headerlink" title="下划线自定义"></a>下划线自定义</h3><p>可以用下边框替代，进而可以使用边框背景图</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 用下边框替代下划线 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> dotted <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">    <span class="attribute">border-bottom-style</span>: solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 用背景图替换下划线 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'https://www.baidu.com/img/baidu_jgylogo3.gif'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="给链接目标添加样式"><a href="#给链接目标添加样式" class="headerlink" title="给链接目标添加样式"></a>给链接目标添加样式</h3><p>链接目标是被锚点链接到的元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.target-element-selector</span><span class="selector-pseudo">:target</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="区分不同类型的链接"><a href="#区分不同类型的链接" class="headerlink" title="区分不同类型的链接"></a>区分不同类型的链接</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 通过属性选择器查找链接到外部页面的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href^='http:']</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 邮箱链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href^='mailto:']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 区分可下载的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href$='.pdf']</span>,<span class="selector-tag">a</span><span class="selector-attr">[href$='.doc']</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="创建按钮"><a href="#创建按钮" class="headerlink" title="创建按钮"></a>创建按钮</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">6.6em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#66a300</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#8cca12</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;普通说明&quot;&gt;&lt;a href=&quot;#普通说明&quot; class=&quot;headerlink&quot; title=&quot;普通说明&quot;&gt;&lt;/a&gt;普通说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;普通文档流中的块框外边距会叠加，但行内块，浮动框，绝对定位的块是不会叠加的。&lt;/li&gt;
&lt;li&gt;修改行内框的唯一
      
    
    </summary>
    
      <category term="code" scheme="https://ywxgod.github.io/blog/categories/code/"/>
    
    
      <category term="css" scheme="https://ywxgod.github.io/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>样式代码结构参考</title>
    <link href="https://ywxgod.github.io/blog/2019/08/21/css/style_categories/"/>
    <id>https://ywxgod.github.io/blog/2019/08/21/css/style_categories/</id>
    <published>2019-08-21T15:44:36.664Z</published>
    <updated>2019-08-29T01:28:12.397Z</updated>
    
    <content type="html"><![CDATA[<h3 id="结构参考"><a href="#结构参考" class="headerlink" title="结构参考"></a>结构参考</h3><ul><li>一般性样式<ol><li>主体样式</li><li>reset样式</li><li>链接</li><li>标题</li><li>其他元素</li></ol></li><li>辅助样式<ol><li>表单</li><li>通知和错误</li><li>一致的条目</li></ol></li><li>页面结构<ol><li>头部、页脚和导航</li><li>布局</li><li>其他页面结构元素</li></ol></li><li>页面组件<ol><li>各个页面模块</li></ol></li><li>覆盖<br>使用统一的大块注释分割每个部分如：<a id="more"></a><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @group general styles</span></span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------- */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* @group helper styles</span></span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------- */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* @group page structure</span></span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------- */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* @group page modules</span></span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------- */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* @group overrides</span></span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------- */</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="特殊性"><a href="#特殊性" class="headerlink" title="特殊性"></a>特殊性</h3><p>特殊性分4个等级：a,b,c,d.</p><ul><li>如果样式是行内样式，a=1.</li><li>b等于ID选择器的总数</li><li>c等于类，伪类和属性选择器的数量</li><li>d等于元素和伪元素的数量</li></ul><table><thead><tr><th style="text-align:left">选择器</th><th style="text-align:center">特殊性</th><th style="text-align:right">特殊值</th></tr></thead><tbody><tr><td style="text-align:left">Style=””</td><td style="text-align:center">1,0,0,0</td><td style="text-align:right">1000</td></tr><tr><td style="text-align:left">#wrapper #content {}</td><td style="text-align:center">0,2,0,0</td><td style="text-align:right">200</td></tr><tr><td style="text-align:left">#wrapper .date {}</td><td style="text-align:center">0,1,1,0</td><td style="text-align:right">110</td></tr><tr><td style="text-align:left">div#content {}</td><td style="text-align:center">0,1,0,1</td><td style="text-align:right">101</td></tr><tr><td style="text-align:left">#content {}</td><td style="text-align:center">0,1,0,0</td><td style="text-align:right">100</td></tr><tr><td style="text-align:left">p.content .date {}</td><td style="text-align:center">0,0,2,1</td><td style="text-align:right">21</td></tr><tr><td style="text-align:left">p.content {}</td><td style="text-align:center">0,0,1,1</td><td style="text-align:right">11</td></tr><tr><td style="text-align:left">p div {}</td><td style="text-align:center">0,0,0,2</td><td style="text-align:right">2</td></tr><tr><td style="text-align:left">p {}</td><td style="text-align:center">0,0,0,1</td><td style="text-align:right">1</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;结构参考&quot;&gt;&lt;a href=&quot;#结构参考&quot; class=&quot;headerlink&quot; title=&quot;结构参考&quot;&gt;&lt;/a&gt;结构参考&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一般性样式&lt;ol&gt;
&lt;li&gt;主体样式&lt;/li&gt;
&lt;li&gt;reset样式&lt;/li&gt;
&lt;li&gt;链接&lt;/li&gt;
&lt;li&gt;标题&lt;/li&gt;
&lt;li&gt;其他元素&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;辅助样式&lt;ol&gt;
&lt;li&gt;表单&lt;/li&gt;
&lt;li&gt;通知和错误&lt;/li&gt;
&lt;li&gt;一致的条目&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;页面结构&lt;ol&gt;
&lt;li&gt;头部、页脚和导航&lt;/li&gt;
&lt;li&gt;布局&lt;/li&gt;
&lt;li&gt;其他页面结构元素&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;页面组件&lt;ol&gt;
&lt;li&gt;各个页面模块&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;覆盖&lt;br&gt;使用统一的大块注释分割每个部分如：
    
    </summary>
    
      <category term="code" scheme="https://ywxgod.github.io/blog/categories/code/"/>
    
    
      <category term="css" scheme="https://ywxgod.github.io/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>用verdaccio搭建个人用npm私服</title>
    <link href="https://ywxgod.github.io/blog/2019/08/19/use_verdaccio/"/>
    <id>https://ywxgod.github.io/blog/2019/08/19/use_verdaccio/</id>
    <published>2019-08-19T15:44:23.736Z</published>
    <updated>2019-08-19T15:44:23.736Z</updated>
    
    <content type="html"><![CDATA[<p>Verdaccio 这个怎么发音？什么意思？谷歌给出的解释：</p><blockquote><p><b><a href="https://verdaccio.org/" target="_blank" rel="noopener">Verdaccio</a></b> is an Italian name for the mixture of black, white, and yellow pigments resulting in a grayish or yellowish (depending on the proportion) soft greenish brown.</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装 - -"></a>安装 - -</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g verdaccio</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verdaccio</span><br></pre></td></tr></table></figure><p>会看到下面的输出表示安装成功。<br><code>warn --- config file  - C:\Users\flasher\AppData\Roaming\verdaccio\config.yaml</code><br><code>warn --- Plugin successfully loaded: htpasswd</code><br><code>warn --- Plugin successfully loaded: audit</code><br><code>warn --- http address - http://localhost:4873/ - verdaccio/3.10.1</code></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This is the default config file. It allows all users to do anything,</span></span><br><span class="line"><span class="comment"># so don't use it on production systems.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Look here for more config file examples:</span></span><br><span class="line"><span class="comment"># https://github.com/verdaccio/verdaccio/tree/master/conf</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># path to a directory with all packages</span></span><br><span class="line">storage: ./storage</span><br><span class="line"><span class="comment"># path to a directory with plugins to include</span></span><br><span class="line">plugins: ./plugins</span><br><span class="line"></span><br><span class="line">web:</span><br><span class="line">  <span class="comment"># WebUI is enabled as default, if you want disable it, just uncomment this line</span></span><br><span class="line">  <span class="comment">#enable: false  # 是否启用web服务，通过web查看现有发布的私有库</span></span><br><span class="line">  title: Verdaccio</span><br><span class="line"></span><br><span class="line">auth:</span><br><span class="line">  htpasswd:</span><br><span class="line">    file: ./htpasswd</span><br><span class="line">    <span class="comment"># Maximum amount of users allowed to register, defaults to "+inf".</span></span><br><span class="line">    <span class="comment"># You can set this to -1 to disable registration.</span></span><br><span class="line">    max_users: <span class="number">-1</span> <span class="comment"># 默认值为1000，此处改为-1表示禁用用户注册</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a list of other known repositories we can talk to</span></span><br><span class="line">uplinks:</span><br><span class="line">  npmjs:</span><br><span class="line">  <span class="comment"># 当安装的包服务器没有缓存，需要去上游下载时的npm包地址</span></span><br><span class="line">  <span class="comment"># 常用的地址还有很多</span></span><br><span class="line">    url: https://registry.npmjs.org/</span><br><span class="line"></span><br><span class="line">packages:</span><br><span class="line">  <span class="string">'@*/*'</span>:</span><br><span class="line">    <span class="comment"># scoped packages</span></span><br><span class="line">    access: $all</span><br><span class="line">    publish: $authenticated <span class="comment">#以@开头的包需要用户认证才可以发布</span></span><br><span class="line">    proxy: npmjs</span><br><span class="line"></span><br><span class="line">  <span class="string">'**'</span>:</span><br><span class="line">    <span class="comment"># allow all users (including non-authenticated users) to read and</span></span><br><span class="line">    <span class="comment"># publish all packages</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># you can specify usernames/groupnames (depending on your auth plugin)</span></span><br><span class="line">    <span class="comment"># and three keywords: "$all", "$anonymous", "$authenticated"</span></span><br><span class="line">    access: $all</span><br><span class="line"></span><br><span class="line">    <span class="comment"># allow all known users to publish packages</span></span><br><span class="line">    <span class="comment"># (anyone can register by default, remember?)</span></span><br><span class="line">    publish: $authenticated</span><br><span class="line"></span><br><span class="line">    <span class="comment"># if package is not available locally, proxy requests to 'npmjs' registry</span></span><br><span class="line">    proxy: npmjs</span><br><span class="line"></span><br><span class="line"><span class="comment"># To use `npm audit` uncomment the following section</span></span><br><span class="line">middlewares:</span><br><span class="line">  audit:</span><br><span class="line">    enabled: true</span><br><span class="line"></span><br><span class="line"><span class="comment"># log settings</span></span><br><span class="line">logs:</span><br><span class="line">  - &#123;type: stdout, format: pretty, level: http&#125;</span><br><span class="line">  <span class="comment">#- &#123;type: file, path: verdaccio.log, level: info&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 局域网内访问地址，不然只能本机访问</span></span><br><span class="line">listen: <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">4873</span></span><br></pre></td></tr></table></figure><p>跑起来后的样子如图：</p><p><img src="/blog/css/images/run_vaderccio.jpg" alt="alt text" title="运行结果"></p>]]></content>
    
    <summary type="html">
    
      几乎零配置的npm私服，轻量，使用简单，个人使用
    
    </summary>
    
      <category term="code" scheme="https://ywxgod.github.io/blog/categories/code/"/>
    
    
      <category term="npm" scheme="https://ywxgod.github.io/blog/tags/npm/"/>
    
      <category term="node.js" scheme="https://ywxgod.github.io/blog/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>Promise与请求超时</title>
    <link href="https://ywxgod.github.io/blog/2019/08/19/use_promise/"/>
    <id>https://ywxgod.github.io/blog/2019/08/19/use_promise/</id>
    <published>2019-08-19T15:44:23.735Z</published>
    <updated>2019-08-19T15:44:23.735Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目有个需求，需要对所有ajax请求增加超时处理，以前是没有的。<br>不管是axios还是原始的XMLHttpRequest都提供了超时设置，正常来说我们可以先设置一个超时时间，然后再在错误事件中区别出timeout错误，这样就可以统一处理，不过前提是你的请求应该是统一经过一个地方发出，不然修改的地方就多了。</p><p>上面的方法可以达到目的，只是不是很好，下面的有两种更妙的方法：<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms,promise</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        promise.then(resolve).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;reject(err)&#125;);</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            reject(<span class="keyword">new</span> TimeoutError(<span class="string">`超时：超过<span class="subst">$&#123;ms&#125;</span>毫秒`</span>))</span><br><span class="line">        &#125;,ms);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">调用：</span><br><span class="line"><span class="keyword">let</span> promiseRequest = ajax.getJson(<span class="string">'......'</span>);</span><br><span class="line">timeout(<span class="number">5000</span>, promiseRequest)</span><br><span class="line">    .then(success)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err <span class="keyword">instanceof</span> TimeoutError)&#123; </span><br><span class="line">            <span class="comment">//timeout </span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//other errors</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><p>我们只需要将原来发请求的函数再封装一下.封装函数(高阶函数?).</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//延时函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">ms</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        setTimeout(resolve,ms);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms,promise</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.race([</span><br><span class="line">        delay(ms).then(<span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">throw</span> <span class="keyword">new</span> TimeoutError(<span class="string">'....'</span>)),</span><br><span class="line">        promise</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Promise.race的原理是：提供给它并行处理的promise中，只要有一个状态发生改变，即返回此promise状态。<br>第二种方法利用Promise.race来处理正常promise和一个延时promise，调用方法跟第一种一样。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目有个需求，需要对所有ajax请求增加超时处理，以前是没有的。&lt;br&gt;不管是axios还是原始的XMLHttpRequest都提供了超时设置，正常来说我们可以先设置一个超时时间，然后再在错误事件中区别出timeout错误，这样就可以统一处理，不过前提是你的请求应该是统一经过一个地方发出，不然修改的地方就多了。&lt;/p&gt;
&lt;p&gt;上面的方法可以达到目的，只是不是很好，下面的有两种更妙的方法：&lt;br&gt;
    
    </summary>
    
      <category term="code" scheme="https://ywxgod.github.io/blog/categories/code/"/>
    
    
      <category term="Promise" scheme="https://ywxgod.github.io/blog/tags/Promise/"/>
    
      <category term="timeout" scheme="https://ywxgod.github.io/blog/tags/timeout/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text无法安装packages的问题</title>
    <link href="https://ywxgod.github.io/blog/2019/08/19/sublime_text_3_can&#39;t_install_packages/"/>
    <id>https://ywxgod.github.io/blog/2019/08/19/sublime_text_3_can&#39;t_install_packages/</id>
    <published>2019-08-19T15:44:23.734Z</published>
    <updated>2019-08-19T15:44:23.734Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现sublime text安装packages的时候不行了，老是弹出一个对话框，说没有可用的包。。。</p><p><img src="/blog/css/images/sublime_text_3_can&#39;t_install_packages_001.png" alt="没有可用的包安装"></p><p>搜了一下都没解决，后来从控制面板看到以下信息：<br><a id="more"></a></p><p><img src="/blog/css/images/sublime_text_3_can&#39;t_install_packages_002.png" alt="链接错误"></p><p>原来是 <a href="https://packagecontrol.io/channel_v3.json" target="_blank" rel="noopener">https://packagecontrol.io/channel_v3.json</a> 连不上了，被墙了？。。。</p><p>解决方法：<br>ctrl+shift+p 打开命令面板，输入 Package setttings，找到”Preferences: Package Control Settings - User”<br>加入以下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"channels"</span>:[</span><br><span class="line">    <span class="string">"http://cst.stu.126.net/u/json/cms/channel_v3.json"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>将原来的地址改为国内的就行了。</p><p>不禁感叹，做一个开发挺难。<br>npmjs国内慢，大家都做镜像，更有甚者还要设置代理。。。。各种问题。。。<br>不过还好，我们总有解决问题的办法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近发现sublime text安装packages的时候不行了，老是弹出一个对话框，说没有可用的包。。。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/css/images/sublime_text_3_can&amp;#39;t_install_packages_001.png&quot; alt=&quot;没有可用的包安装&quot;&gt;&lt;/p&gt;
&lt;p&gt;搜了一下都没解决，后来从控制面板看到以下信息：&lt;br&gt;
    
    </summary>
    
      <category term="code" scheme="https://ywxgod.github.io/blog/categories/code/"/>
    
    
      <category term="sublime text" scheme="https://ywxgod.github.io/blog/tags/sublime-text/"/>
    
  </entry>
  
  <entry>
    <title>ES6数组去重的三种方法</title>
    <link href="https://ywxgod.github.io/blog/2019/08/19/remove_array_duplicates_in_es6/"/>
    <id>https://ywxgod.github.io/blog/2019/08/19/remove_array_duplicates_in_es6/</id>
    <published>2019-08-19T15:44:23.730Z</published>
    <updated>2019-08-19T15:44:23.733Z</updated>
    
    <content type="html"><![CDATA[<p>ES6数组去重我们可以用以下三种方法：</p><h4 id="1-使用Set"><a href="#1-使用Set" class="headerlink" title="1. 使用Set"></a>1. 使用Set</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log([...new <span class="built_in">Set</span>(array)]); <span class="comment">//[ 1, 2, 3, 4, 6, 8, 9, 5, 7 ]</span></span><br></pre></td></tr></table></figure><h4 id="2-使用filter函数"><a href="#2-使用filter函数" class="headerlink" title="2. 使用filter函数"></a>2. 使用filter函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">let</span> result = array.filter(<span class="function">(<span class="params">item,index</span>)=&gt;</span>array.findIndex(<span class="function"><span class="params">i</span>=&gt;</span>i==item)==index);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//[1, 2, 3, 4, 6, 8, 9, 5, 7]</span></span><br></pre></td></tr></table></figure><h4 id="3-使用reduce函数"><a href="#3-使用reduce函数" class="headerlink" title="3. 使用reduce函数"></a>3. 使用reduce函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">let</span> result = array.reduce(<span class="function">(<span class="params">res,item</span>)=&gt;</span>res.includes(item)?res:[...res,item],[]);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//[1, 2, 3, 4, 6, 8, 9, 5, 7]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ES6数组去重我们可以用以下三种方法：&lt;/p&gt;
&lt;h4 id=&quot;1-使用Set&quot;&gt;&lt;a href=&quot;#1-使用Set&quot; class=&quot;headerlink&quot; title=&quot;1. 使用Set&quot;&gt;&lt;/a&gt;1. 使用Set&lt;/h4&gt;&lt;figure class=&quot;highlight
      
    
    </summary>
    
      <category term="code" scheme="https://ywxgod.github.io/blog/categories/code/"/>
    
    
      <category term="ES6" scheme="https://ywxgod.github.io/blog/tags/ES6/"/>
    
      <category term="Array" scheme="https://ywxgod.github.io/blog/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>用webpack打包的常见问题</title>
    <link href="https://ywxgod.github.io/blog/2019/08/19/issues_for_webpack/"/>
    <id>https://ywxgod.github.io/blog/2019/08/19/issues_for_webpack/</id>
    <published>2019-08-19T15:44:23.729Z</published>
    <updated>2019-08-19T15:44:23.729Z</updated>
    
    <content type="html"><![CDATA[<p>webpack配置项太多，要完全完美的写一个webpack配置需要了解太多的东西了，下面记录的是自己学习过程中感到比较重要的地方和处理方法，当然处理方法不止一种，这里只是其中的一种而已。<br>本文参考于：<a href="https://survivejs.com/webpack/foreword/" target="_blank" rel="noopener">https://survivejs.com/webpack/foreword/</a>，那里有详细的英文文档。</p><p><strong><a href="#如何传不同的环境变量产生不同的输出">1. 如何传不同的环境变量产生不同的输出</a></strong><br><strong><a href="#开发环境有更新时如何自动打包">2. 开发环境有更新时如何自动打包</a></strong><br><strong><a href="#如何处理图片，字体，多媒体等资源文件">3. 如何处理图片，字体，多媒体等资源文件</a></strong><br><strong><a href="#如何使用sass">4. 如何使用sass</a></strong><br><strong><a href="#如何优化CSS">5. 如何优化CSS</a></strong><br><strong><a href="#如何分块">6. 如何分块</a></strong><br><strong><a href="#如何压缩">7. 如何压缩</a></strong><br><strong><a href="#总结">8. 总结</a></strong></p><a id="more"></a><h3 id="如何传不同的环境变量产生不同的输出"><a href="#如何传不同的环境变量产生不同的输出" class="headerlink" title="如何传不同的环境变量产生不同的输出"></a>如何传不同的环境变量产生不同的输出</h3><p>webpack配置文件是一个js文件，是一个common.js标准的js模块, 我们可以在其中写js逻辑，会在node.js环境中执行。大部分情况下我们通常在webpack配置文件导出一个对象，如果将对象改为函数，就可以传参数了。根据webpack官网文档，参数可以有两个：  </p><p><em>An environment as the first parameter.</em><br><em>An options map (argv) as the second parameter.</em></p><p>如果不在编程环境使用，使用第一个参数一般就可以了，下面是例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">env</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> isDev = env === <span class="string">'development'</span>;</span><br><span class="line">    <span class="keyword">let</span> isProd = env === <span class="string">'production'</span>;</span><br><span class="line">    <span class="keyword">let</span> isTest = env === <span class="string">'test'</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        mode: </span><br><span class="line">        entry: </span><br><span class="line">        output:</span><br><span class="line">        ....</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>定义了导出函数，再看如何将参数传进去。</p><p>我们可以在package.json的scripts中定义自己的命令，如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"build:prod"</span>: <span class="string">"npm run clean &amp;&amp; webpack --config build/webpack.config.js --env production"</span></span><br></pre></td></tr></table></figure></p><p>这里webpack配置文件没有放在项目跟目录，所以通过–config参数指定路径。<br><strong>–env production 这就是具体的传参方法，其中–env是参数名，production为值</strong><br>一般情况下，我们可以给–env传production，development，test三个值，也可以任意值，只要你在配置文件中对应处理即可。</p><p>这里–env传的是一个简单的字符串，其实还可以传一个对象，如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"build:prod"</span>: <span class="string">"npm run clean &amp;&amp; webpack --config build/webpack.config.js --env.a production"</span></span><br></pre></td></tr></table></figure></p><p>在env对象上面定义了a属性，并设置env.a=production,同理还可以设置其他的属性env.b….<br>处理的时候就变成这样了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">env</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(env); <span class="comment">//&#123;"a":"production"&#125;</span></span><br><span class="line">    env = env.a;</span><br><span class="line">    <span class="keyword">let</span> isDev = env === <span class="string">'development'</span>;</span><br><span class="line">    <span class="keyword">let</span> isProd = env === <span class="string">'production'</span>;</span><br><span class="line">    <span class="keyword">let</span> isTest = env === <span class="string">'test'</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        mode: </span><br><span class="line">        entry: </span><br><span class="line">        output:</span><br><span class="line">        ....</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="开发环境有更新时如何自动打包"><a href="#开发环境有更新时如何自动打包" class="headerlink" title="开发环境有更新时如何自动打包"></a>开发环境有更新时如何自动打包</h3><p>自动打包，其实就是要监听到文件的改变，这个跟热加载可能有点不一样。<br>要监听文件的改变可以用<strong><a href="https://github.com/remy/nodemon" target="_blank" rel="noopener">nodemon</a></strong><br><em>Monitor for any changes in your node.js application and automatically restart the server</em></p><p>具体命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"build:dev"</span>: <span class="string">"nodemon --watch build --exec \"webpack-dev-server --compress --config build/webpack.config.js --env development\""</span></span><br></pre></td></tr></table></figure></p><p>–watch 参数表示监听build目录的改变，当build目录有文件改变时，会重新执行此命令。<br>监听业务代码目录的改变利用的是webpack-dev-server的配置，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> devServer = &#123;</span><br><span class="line">    contentBase: build_const.outputUrl,</span><br><span class="line">    port: build_const.port,</span><br><span class="line">    host: build_const.host,</span><br><span class="line">    watchContentBase: <span class="literal">true</span>,</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    stats: &#123;</span><br><span class="line">        performance: <span class="literal">true</span>,</span><br><span class="line">        chunks: <span class="literal">false</span>,</span><br><span class="line">        chunkModules: <span class="literal">false</span>,</span><br><span class="line">        chunkOrigins: <span class="literal">false</span>,</span><br><span class="line">        errors: <span class="literal">true</span>,</span><br><span class="line">        errorDetails: <span class="literal">true</span>,</span><br><span class="line">        hash: <span class="literal">false</span>,</span><br><span class="line">        timings: <span class="literal">false</span>,</span><br><span class="line">        modules: <span class="literal">false</span>,</span><br><span class="line">        warnings: <span class="literal">true</span>,</span><br><span class="line">        entrypoints: <span class="literal">false</span>,</span><br><span class="line">        children: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>关键设置 watchContentBase为true，当文件改变时，会重新加载页面。<br>还有一个问题就是，每次重新打包，需要清除上一次产生的文件，我们可以通过webpack提供的相关插件来处理，也可以用node.js实现的命令行实现，这里我用<strong><a href="https://github.com/shelljs/shx" target="_blank" rel="noopener">shx</a></strong>，具体命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"clean"</span>: <span class="string">"shx echo cleaning dirctory dist &amp;&amp; shx rm -rf dist/*"</span></span><br></pre></td></tr></table></figure></p><h3 id="如何处理图片，字体，多媒体等资源文件"><a href="#如何处理图片，字体，多媒体等资源文件" class="headerlink" title="如何处理图片，字体，多媒体等资源文件"></a>如何处理图片，字体，多媒体等资源文件</h3><p>webpack处理图片，字体，多媒体等文件都是通过设置rules来处理的。<br>需要用的loaders有：<strong><a href="https://github.com/webpack-contrib/url-loader" target="_blank" rel="noopener">url-loader</a></strong>，<strong><a href="https://github.com/webpack-contrib/file-loader" target="_blank" rel="noopener">file-loader</a></strong><br>当文件大小超过一定的阈值时，url-loader会调用file-loader来加载对于资源。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.(jpg|jpeg|gif|bmp|png|ico)$/</span>,</span><br><span class="line">    use: &#123;</span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">            limit: <span class="number">10240</span>,</span><br><span class="line">            publicPath: <span class="string">'../'</span>,</span><br><span class="line">            name: <span class="string">'./images/[name]-[hash:8].[ext]'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.(mp4|webm|ogg|mp3|wav|flac|aac|flv)(\?.*)?$/</span>,</span><br><span class="line">    loader: <span class="string">'url-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">        limit: <span class="number">10240</span>,</span><br><span class="line">        publicPath: <span class="string">'../'</span>,</span><br><span class="line">        name: <span class="string">'./media/[name].[hash:8].[ext]'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.(svg|eot|ttf|woff|woff2)(\?v=\d+\.\d+\.\d+)?$/</span>,</span><br><span class="line">    use: &#123;</span><br><span class="line">        loader: <span class="string">'file-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">            publicPath: <span class="string">'../'</span>,</span><br><span class="line">            name: <span class="string">'./fonts/[name].[ext]'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="如何使用sass"><a href="#如何使用sass" class="headerlink" title="如何使用sass"></a>如何使用sass</h3><p>同样需要配置rules，这里需要用到<strong><a href="https://github.com/webpack-contrib/style-loader" target="_blank" rel="noopener">style-loader</a></strong>，<strong><a href="https://github.com/webpack-contrib/css-loader" target="_blank" rel="noopener">css-loader</a></strong>， <strong><a href="https://github.com/webpack-contrib/sass-loader" target="_blank" rel="noopener">sass-loader</a></strong>而sass-loader 又依赖 <strong><a href="https://github.com/topics/node-sass" target="_blank" rel="noopener">node-sass</a></strong></p><p>关于style-loader，css-loader具体的作用，可以参考下面这句话：</p><p>css-loader goes through possible @import and url() lookups within the matched files and treats them as a regular ES2015 import. If an @import points to an external resource, css-loader skips it as only internal resources get processed further by webpack.</p><p>style-loader injects the styling through a style element. The way it does this can be customized. It also implements the Hot Module Replacement interface providing for a pleasant development experience.</p><p>rules具体配置：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.s?[ac]ss$/</span>,</span><br><span class="line">    use: [</span><br><span class="line">        <span class="string">'style-loader'</span>,</span><br><span class="line">        &#123;<span class="attr">loader</span>:<span class="string">'css-loader'</span>,<span class="attr">options</span>:&#123;<span class="attr">importLoaders</span>:<span class="number">1</span>&#125;&#125;,</span><br><span class="line">        <span class="string">'sass-loader'</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="如何优化CSS"><a href="#如何优化CSS" class="headerlink" title="如何优化CSS"></a>如何优化CSS</h3><p>从webpack的角度优化CSS，有三个阶段：     </p><h5 id="1-将css从js中分离出来。"><a href="#1-将css从js中分离出来。" class="headerlink" title="1. 将css从js中分离出来。"></a>1. 将css从js中分离出来。</h5><p>分离css需要安装插件：<strong><a href="https://github.com/webpack-contrib/mini-css-extract-plugin" target="_blank" rel="noopener">mini-css-extract-plugin</a></strong>，修改上面处理css的规则：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.s?[ac]ss$/</span>,</span><br><span class="line">    use: [</span><br><span class="line">        isProd?&#123;<span class="attr">loader</span>:MiniCssExtractPlugin.loader,<span class="attr">options</span>:&#123;<span class="attr">publicPath</span>: <span class="string">'../'</span>&#125;&#125;:<span class="string">'style-loader'</span>,</span><br><span class="line">        &#123;<span class="attr">loader</span>:<span class="string">'css-loader'</span>,<span class="attr">options</span>:&#123;<span class="attr">importLoaders</span>:<span class="number">1</span>&#125;&#125;,</span><br><span class="line">        <span class="string">'sass-loader'</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还需增加plugins配置：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">    filename: <span class="string">'./styles/[name]-[contenthash:8].css'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'./styles/chunk-[name]-[contenthash:8].css'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h5 id="2-删除无用的css。"><a href="#2-删除无用的css。" class="headerlink" title="2. 删除无用的css。"></a>2. 删除无用的css。</h5><p>删除无用的css需要安装： <strong><a href="https://github.com/isaacs/node-glob#readme" target="_blank" rel="noopener">glob</a></strong>,<strong><a href="https://github.com/FullHuman/purgecss-webpack-plugin#readme" target="_blank" rel="noopener">purgecss-webpack-plugin</a></strong>(原purifycss-webpack),<strong><a href="https://github.com/purifycss/purifycss" target="_blank" rel="noopener">purify-css</a></strong><br>增加plugins配置：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PurgecssPlugin = <span class="built_in">require</span>(<span class="string">'purgecss-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">let</span> purgeCSSPlugin = <span class="keyword">new</span> PurgecssPlugin(&#123;</span><br><span class="line">    paths: glob.sync(<span class="string">`<span class="subst">$&#123;build_const.sourceUrl&#125;</span>/**/*`</span>,&#123; <span class="attr">nodir</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">    <span class="comment">//keyframes: true,</span></span><br><span class="line">    <span class="comment">//fontFace: true,</span></span><br><span class="line">    whitelist: <span class="function"><span class="params">()</span>=&gt;</span>build_const.purgeCssWhiteList,</span><br><span class="line">    whitelistPatterns: <span class="function"><span class="params">()</span>=&gt;</span>build_const.purgeCssWhitelistPatterns</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>purgecss-webpack-plugin插件只能在mini-css-extract-plugin插件后面使用，具体的使用方法可以参考： <strong><a href="https://www.purgecss.com/" target="_blank" rel="noopener">https://www.purgecss.com/</a></strong></p><h5 id="3-压缩css"><a href="#3-压缩css" class="headerlink" title="3. 压缩css"></a>3. 压缩css</h5><p>压缩CSS需要安装： <strong><a href="https://github.com/NMFR/optimize-css-assets-webpack-plugin" target="_blank" rel="noopener">optimize-css-assets-webpack-plugin</a></strong>, <strong><a href="https://github.com/cssnano/cssnano" target="_blank" rel="noopener">cssnano</a></strong><br>增加plugins配置：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">"optimize-css-assets-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">let</span> zipCSSAssetsPlugin = <span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;</span><br><span class="line">    cssProcessor: cssnano,</span><br><span class="line">    cssProcessorPluginOptions: &#123;</span><br><span class="line">        preset: [<span class="string">'default'</span>, &#123; <span class="attr">discardComments</span>: &#123; <span class="attr">removeAll</span>: <span class="literal">true</span> &#125; &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    canPrint: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="如何分块"><a href="#如何分块" class="headerlink" title="如何分块"></a>如何分块</h3><p>压缩和分块主要是针对js，可以通过三个方法进行处理：</p><h5 id="1-配置多个入口，webpack会为每个入口生成一个chunk"><a href="#1-配置多个入口，webpack会为每个入口生成一个chunk" class="headerlink" title="1. 配置多个入口，webpack会为每个入口生成一个chunk"></a>1. 配置多个入口，webpack会为每个入口生成一个chunk</h5><p>配置多个入口，可以这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    polyfill: <span class="string">'@babel/polyfill'</span>,</span><br><span class="line">    app: build_const.entryUrl</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="2-用import，require等动态加载函数实现分块"><a href="#2-用import，require等动态加载函数实现分块" class="headerlink" title="2. 用import，require等动态加载函数实现分块"></a>2. 用import，require等动态加载函数实现分块</h5><p>import,require等动态加载函数通常用在路由配置中，如：vue-router等</p><h5 id="3-用webpack4自带插件处理分块"><a href="#3-用webpack4自带插件处理分块" class="headerlink" title="3. 用webpack4自带插件处理分块"></a>3. 用webpack4自带插件处理分块</h5><p>webpack4改用隐示调用插件进行分块，需要配置optimization块，如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    runtimeChunk: &#123;</span><br><span class="line">        name: <span class="string">"manifest"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    minimizer: [uglifyjsWebpackPlugin],</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">        <span class="comment">//minSize: 30000,</span></span><br><span class="line">        <span class="comment">//maxSize: 0,</span></span><br><span class="line">        cacheGroups:&#123;</span><br><span class="line">            commons:&#123;</span><br><span class="line">                test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">                name: <span class="string">"vendor"</span>,</span><br><span class="line">                chunks: <span class="string">"initial"</span>,</span><br><span class="line">                minChunks: <span class="number">2</span>,</span><br><span class="line">                priority: <span class="number">2</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            styles: &#123;</span><br><span class="line">              name: <span class="string">'styles'</span>,</span><br><span class="line">              test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">              chunks: <span class="string">'all'</span>,</span><br><span class="line">              enforce: <span class="literal">true</span>,</span><br><span class="line">              priority: <span class="number">20</span>, </span><br><span class="line">            &#125;,</span><br><span class="line">            react: &#123;</span><br><span class="line">                test: <span class="regexp">/[\\/]node_modules[\\/](react|react-dom)[\\/]/</span>,</span><br><span class="line">                name: <span class="string">'react'</span>,</span><br><span class="line">                chunks: <span class="string">"initial"</span>,</span><br><span class="line">                priority: <span class="number">10</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            antd: &#123;</span><br><span class="line">                test: <span class="regexp">/[\\/]node_modules[\\/](antd|@ant-design)[\\/]/</span>,</span><br><span class="line">                name: <span class="string">'antd'</span>,</span><br><span class="line">                chunks: <span class="string">"initial"</span>,</span><br><span class="line">                priority: <span class="number">11</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>主要看cacheGroups对象内定义的对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">commons:&#123;</span><br><span class="line">    test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">    name: <span class="string">"vendor"</span>,</span><br><span class="line">    chunks: <span class="string">"initial"</span>,</span><br><span class="line">    minChunks: <span class="number">2</span>,</span><br><span class="line">    priority: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>test</strong> 表示匹配的路径。<br><strong>name</strong> 表示块名称。<br><strong>chunks</strong> This indicates which chunks will be selected for optimization. When a string is provided, valid values are all, async, and initial. Providing all can be particularly powerful, because it means that chunks can be shared even between async and non-async chunks.<br><strong>minChunks</strong> 表示调用次数最少是多少时提取。<br><strong>priority</strong> 表示提取的优先级，值越小越早处理。</p><p>webpack有三种chunk类型：initial，normal，entry</p><p><strong>Entry chunks</strong> - Entry chunks contain webpack runtime and modules it then loads.<br><strong>Normal chunks</strong> - Normal chunks don’t contain webpack runtime. Instead, these can be loaded dynamically while the application is running. A suitable wrapper (JSONP for example) is generated for these. You generate a normal chunk in the next chapter as you set up code splitting.<br><strong>Initial chunks</strong> - Initial chunks are normal chunks that count towards initial loading time of the application. As a user, you don’t have to care about these. It’s the split between entry chunks and normal chunks that is important.</p><h3 id="如何压缩"><a href="#如何压缩" class="headerlink" title="如何压缩"></a>如何压缩</h3><p>有两个地方需要压缩：</p><h5 id="1-压缩js源码，混淆等。"><a href="#1-压缩js源码，混淆等。" class="headerlink" title="1. 压缩js源码，混淆等。"></a>1. 压缩js源码，混淆等。</h5><p>安装插件：<strong><a href="https://github.com/webpack-contrib/uglifyjs-webpack-plugin" target="_blank" rel="noopener">uglifyjs-webpack-plugin</a></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyJsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">let</span> uglifyjsWebpackPlugin = <span class="keyword">new</span> UglifyJsWebpackPlugin(&#123;</span><br><span class="line">    cache: <span class="literal">true</span>,</span><br><span class="line">    parallel: <span class="literal">true</span>,</span><br><span class="line">    sourceMap: <span class="literal">false</span>,</span><br><span class="line">    uglifyOptions:&#123;</span><br><span class="line">        ie8:<span class="literal">false</span>,</span><br><span class="line">        mangle: <span class="literal">true</span>,</span><br><span class="line">        keep_fnames: <span class="literal">false</span>,</span><br><span class="line">        toplevel: <span class="literal">false</span>,</span><br><span class="line">        compress: &#123;</span><br><span class="line">            unused: <span class="literal">true</span>,</span><br><span class="line">            dead_code: <span class="literal">true</span>,</span><br><span class="line">            drop_debugger: <span class="literal">true</span>,</span><br><span class="line">            conditionals: <span class="literal">true</span>,</span><br><span class="line">            evaluate: <span class="literal">true</span>,</span><br><span class="line">            drop_console: <span class="literal">false</span>,</span><br><span class="line">            sequences: <span class="literal">true</span>,</span><br><span class="line">            booleans: <span class="literal">true</span>,</span><br><span class="line">            warnings: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        output: &#123;</span><br><span class="line">            beautify: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>将uglifyjsWebpackPlugin添加到optimization块的minimizer数组中即可：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minimizer: [uglifyjsWebpackPlugin]</span><br></pre></td></tr></table></figure></p><h5 id="2-减少js传输体积，对js进行gzip编码，一般情况会减小源文件大小。"><a href="#2-减少js传输体积，对js进行gzip编码，一般情况会减小源文件大小。" class="headerlink" title="2. 减少js传输体积，对js进行gzip编码，一般情况会减小源文件大小。"></a>2. 减少js传输体积，对js进行gzip编码，一般情况会减小源文件大小。</h5><p>安装插件：<strong><a href="https://github.com/webpack-contrib/compression-webpack-plugin" target="_blank" rel="noopener">compression-webpack-plugin</a></strong><br>增加plugins配置：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CompressionWebpackPlugin = <span class="built_in">require</span>(<span class="string">'compression-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">let</span> compressionPlugin = <span class="keyword">new</span> CompressionWebpackPlugin(&#123;</span><br><span class="line">    test: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\.('</span> +build_const.gzipFileExts.join(<span class="string">'|'</span>) +<span class="string">')$'</span>),</span><br><span class="line">    threshold: <span class="number">10240</span>,</span><br><span class="line">    minRatio: <span class="number">0.8</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>gzipFileExts，包含扩展名的数组，如：[‘js’,’css’,’html’,’ico’,’jpg’,’png’,’ttf’,’woff’]</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>自己一点一点配置webpack确实是体力活，还好不管是vue还是react都提供了对应的cli命令行帮助我们创建项目，还有专门的在线生成配置的网站：<strong><a href="https://webpack.jakoblind.no/" target="_blank" rel="noopener">https://webpack.jakoblind.no/</a></strong>, <strong><a href="https://generatewebpackconfig.netlify.com/" target="_blank" rel="noopener">https://generatewebpackconfig.netlify.com/</a></strong>可以参考。不过作为前端人员，还是有必要知道webpack的每一个配置项。</p><p>最后推荐webpack配置教程：<strong><a href="https://survivejs.com/webpack/foreword/" target="_blank" rel="noopener">https://survivejs.com/webpack/foreword/</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;webpack配置项太多，要完全完美的写一个webpack配置需要了解太多的东西了，下面记录的是自己学习过程中感到比较重要的地方和处理方法，当然处理方法不止一种，这里只是其中的一种而已。&lt;br&gt;本文参考于：&lt;a href=&quot;https://survivejs.com/webpack/foreword/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://survivejs.com/webpack/foreword/&lt;/a&gt;，那里有详细的英文文档。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;#如何传不同的环境变量产生不同的输出&quot;&gt;1. 如何传不同的环境变量产生不同的输出&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&quot;#开发环境有更新时如何自动打包&quot;&gt;2. 开发环境有更新时如何自动打包&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&quot;#如何处理图片，字体，多媒体等资源文件&quot;&gt;3. 如何处理图片，字体，多媒体等资源文件&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&quot;#如何使用sass&quot;&gt;4. 如何使用sass&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&quot;#如何优化CSS&quot;&gt;5. 如何优化CSS&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&quot;#如何分块&quot;&gt;6. 如何分块&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&quot;#如何压缩&quot;&gt;7. 如何压缩&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&quot;#总结&quot;&gt;8. 总结&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="code" scheme="https://ywxgod.github.io/blog/categories/code/"/>
    
    
      <category term="webpack" scheme="https://ywxgod.github.io/blog/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>HTTP访问控制CORS</title>
    <link href="https://ywxgod.github.io/blog/2019/08/19/http_cors/"/>
    <id>https://ywxgod.github.io/blog/2019/08/19/http_cors/</id>
    <published>2019-08-19T15:44:23.728Z</published>
    <updated>2019-08-19T15:44:23.728Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要分一下几个部分：</p><ol><li><a href="#定义CORS"><strong>定义CORS</strong></a></li><li><a href="#同源"><strong>同源</strong></a></li><li><a href="#可能产生跨域的情况"><strong>可能产生跨域的情况</strong></a></li><li><a href="#预检请求preflight request"><strong>预检请求preflight request</strong></a></li><li><a href="#简单请求"><strong>简单请求</strong></a></li><li><a href="#带身份凭证的请求"><strong>带身份凭证的请求</strong></a></li><li><a href="#相关HTTP请求头字段"><strong>相关HTTP请求头字段</strong></a></li><li><a href="#相关HTTP响应头字段"><strong>相关HTTP响应头字段</strong></a><a id="more"></a></li></ol><h3 id="定义CORS"><a href="#定义CORS" class="headerlink" title="定义CORS"></a>定义CORS</h3><p>CORS是一种跨域资源共享机制，使用额外的HTTP头告诉浏览器，让运行在某个origin上的web应用可以访问来自不同origin服务器上的资源。</p><h3 id="同源"><a href="#同源" class="headerlink" title="同源"></a>同源</h3><p>当请求的双方所用协议，端口，域名都相同时，即为同源，否则为不同源。不同源的请求为跨域请求。</p><h3 id="可能产生跨域的情况"><a href="#可能产生跨域的情况" class="headerlink" title="可能产生跨域的情况"></a>可能产生跨域的情况</h3><ol><li>XMLHttpRequest或Fetch发起的跨域HTTP请求</li><li>Web字体，即通过@font-face使用跨域字体资源</li><li>WebGL贴图</li><li>drawImage向canvas绘制images/video画面时</li></ol><h3 id="预检请求preflight-request"><a href="#预检请求preflight-request" class="headerlink" title="预检请求preflight request"></a>预检请求preflight request</h3><p>对那些可能对服务器数据产生副作用的HTTP请求方法，特别是GET方法以外的HTTP请求，或者搭配某些MIME类型的POST请求，浏览器在发送请求之前必须用OPTIONS方法发送一个预检请求，浏览器从预检请求获知服务端是否允许跨域，是否允许携带身份凭证。</p><p>当满足以下任一条件，浏览器会先发送预检请求：</p><ul><li>使用了下面任一HTTP方法：<ul><li>PUT</li><li>DELETE</li><li>CONNECT</li><li>OPTIONS</li><li>TRACE</li><li>PATCH</li></ul></li><li>人为设置了CORS安全头字段集合之外的头字段。该集合为：<ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Content-Type(Content-Type有额外的限制)</li><li>DPR</li><li>Downlink</li><li>Save-Data</li><li>Viewport-Width</li><li>Width</li></ul></li><li>Content-Type值不属于下列值之一：<ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul></li><li>请求中的XMLHttpRequestUpload对象注册了任意多个事件监听器。</li><li>请求中使用了ReadableStream对象。</li></ul><h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><p>同时满足以下5个条件的请求，视为简单请求，浏览器在发送简单请求时不会发送预检请求。</p><ul><li>使用下列方法之一：<ul><li>GET</li><li>HEAD</li><li>POST</li></ul></li><li>请求头中不包含CORS安全头定义字段集合外的字段，该集合为：<ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Content-Type(Content-Type有额外的限制)</li><li>DPR</li><li>Downlink</li><li>Save-Data</li><li>Viewport-Width</li><li>Width</li></ul></li><li>Content-Type的值仅限于下列三者之一：<ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul></li><li>请求中的任意XMLHttpRequestUpload对象均没有注册任何事件监听器</li><li>请求中没有使用ReadableStream对象。</li></ul><h3 id="带身份凭证的请求"><a href="#带身份凭证的请求" class="headerlink" title="带身份凭证的请求"></a>带身份凭证的请求</h3><p>XMLHttpRequest或Fetch发起的跨域HTTP请求，浏览器不会携带身份凭证信息。</p><p>如果要发送凭证信息：<br>XMLHttpRequest需要设置withCredentials为true。<br>Fetch需要设置init对象的credentials为include或者same-origin。<br>即使浏览器发送了凭证信息，如果服务器响应头没有Access-Control-Allow-Credentials：true，浏览器也不会把响应内容返回给请求者。<br>总的来说，就是要客户端设置相应的Credentials为true，服务器端响应头也需要增加Access-Control-Allow-Credentials：true。</p><h3 id="相关HTTP请求头字段"><a href="#相关HTTP请求头字段" class="headerlink" title="相关HTTP请求头字段"></a>相关HTTP请求头字段</h3><p><code>Origin</code><br>表示请求的源站，值为源站URI。它不包含任何路径信息，只是服务器名称。不管是否为跨域请求，此字段总是被发送。</p><p><code>Access-Control-Request-Method</code><br>用于预检请求，告诉服务器实际请求将要使用的方法，如：Access-Control-Request-Method：PUT</p><p><code>Access-Control-Request-Headers</code><br>用于预检请求，告诉实际请求所携带的请求头字段</p><h3 id="相关HTTP响应头字段"><a href="#相关HTTP响应头字段" class="headerlink" title="相关HTTP响应头字段"></a>相关HTTP响应头字段</h3><p><code>Access-Control-Allow-Origin</code><br>指定允许访问该资源的外域URI，对于不需要携带身份凭证的请求，服务器可以指定该字段值为通配符，表示允许来自所有域的请求访问该资源。如果服务器指定了具体的域名而非通配符，那么响应头中Vary字段必须包含Origin，这将告诉客户端，服务器对不同的源站返回不同的内容。</p><p><code>Access-Control-Expose-Headers</code><br>跨域访问时，默认情况下浏览器只能读取一些常用响应头，如：Cache-Control， Content-Type，Content-Language等，如果要访问其他响应头，这需要设置此值。如：Access-Control-Expose-Headers: X-My-Custom-Header, X-Another-Custom-Header。这样浏览器就能访问自定义的响应头：X-My-Custom-Header, X-Another-Custom-Header</p><p><code>Access-Control-Max-Age</code><br>指定预检请求的结果能被浏览器缓存多久(以秒为单位)。在有效时间内，浏览器无须为同一请求再次发起预检请求。</p><p><code>Access-Control-Allow-Credentials</code><br>指定了当浏览器的credentials设为true时，是否允许浏览器读取response内容。</p><p><code>Access-Control-Allow-Methods</code><br>用于预检请求的响应头，指明实际请求所允许使用的HTTP方法</p><p><code>Access-Control-Allow-Headers</code><br>用于预检请求的响应头，指明实际请求所允许使用的HTTP请求头字段</p><p>本文大部分内容来自于MDN相关代码示例参考： <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">HTTP访问控制CORS</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要分一下几个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#定义CORS&quot;&gt;&lt;strong&gt;定义CORS&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#同源&quot;&gt;&lt;strong&gt;同源&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#可能产生跨域的情况&quot;&gt;&lt;strong&gt;可能产生跨域的情况&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#预检请求preflight request&quot;&gt;&lt;strong&gt;预检请求preflight request&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#简单请求&quot;&gt;&lt;strong&gt;简单请求&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#带身份凭证的请求&quot;&gt;&lt;strong&gt;带身份凭证的请求&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#相关HTTP请求头字段&quot;&gt;&lt;strong&gt;相关HTTP请求头字段&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#相关HTTP响应头字段&quot;&gt;&lt;strong&gt;相关HTTP响应头字段&lt;/strong&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="code" scheme="https://ywxgod.github.io/blog/categories/code/"/>
    
    
      <category term="跨域" scheme="https://ywxgod.github.io/blog/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="CORS" scheme="https://ywxgod.github.io/blog/tags/CORS/"/>
    
  </entry>
  
  <entry>
    <title>Canvas中文本的定位</title>
    <link href="https://ywxgod.github.io/blog/2019/08/19/canvas/canvas_text_position/"/>
    <id>https://ywxgod.github.io/blog/2019/08/19/canvas/canvas_text_position/</id>
    <published>2019-08-19T15:44:23.727Z</published>
    <updated>2019-08-19T15:44:23.727Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道canvas中绘制文本主要有两个方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.strokeText(<span class="string">'text'</span>,x,y);</span><br><span class="line">ctx.fillText(<span class="string">'text'</span>,x,y);</span><br></pre></td></tr></table></figure><p>text - 需要绘制的文本<br>x - 文本的x坐标<br>y - 文本的y坐标</p><p>但是文本本身有宽度高度，所以要精确定位文本仅仅知道坐标还不行，还得知道坐标对应于文本本身的哪个点。<br>用Flash的概念来说，就是我们还需要知道文本的注册点在哪里。</p><p>canvas中有两个属性来设置文本的注册点：<strong>textAlign</strong>和<strong>textBaseline</strong><br><a id="more"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.textAlign = <span class="string">"left"</span> || <span class="string">"right"</span> || <span class="string">"center"</span> || <span class="string">"start"</span> || <span class="string">"end"</span>;</span><br><span class="line">ctx.textBaseline = <span class="string">"top"</span> || <span class="string">"hanging"</span> || <span class="string">"middle"</span> || <span class="string">"alphabetic"</span> || <span class="string">"ideographic"</span> || <span class="string">"bottom"</span>;</span><br></pre></td></tr></table></figure><p>textAlign表示文本在水平方向上的对齐方式，默认值为left。<br>textBaseline表示文本在垂直方向的对齐方式，默认值为alphabetic。</p><p><img src="/blog/css/images/canvas_text_pos.png" alt="textAlign与textBaseline具体的表现"></p><p>从上图可以看到textAlign和textBaseline是如何影响文本的位置的，接下来处理文本对齐的问题。</p><p>让文本在canvas上居中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">context.font = <span class="string">'38px sans-serif'</span>;</span><br><span class="line">context.textAlign = <span class="string">'center'</span>;</span><br><span class="line">context.textBaseline = <span class="string">'middle'</span>;</span><br><span class="line">context.strokeStyle = <span class="string">'blue'</span>;</span><br><span class="line">context.strokeText(<span class="string">'What can I do for you?'</span>, canvas.width/<span class="number">2</span>,canvas.height/<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>textAlign,textBaseline分别设置为center,middle相当于将文本的注册点移动到了文本本身的中间位置，<br>所以绘制的时候只要设置坐标为canvas的中间位置即可。</p><p>如果将文本的注册点设置到文本的左上角，即start/top。<br>此时要居中文本得知道文本得高度和宽度，然后算出文本的坐标：</p><p>x = canvas.width/2-textWidth/2;<br>y = canvas.height/2-textHeight/2;</p><p>虽然measureText可以拿到文本的大概宽度，但无法获取文本的高度，<br>所以如果将注册点设置到左上角，要想居中对齐文本就没有那么精确了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道canvas中绘制文本主要有两个方法：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ctx.strokeText(&lt;span class=&quot;string&quot;&gt;&#39;text&#39;&lt;/span&gt;,x,y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ctx.fillText(&lt;span class=&quot;string&quot;&gt;&#39;text&#39;&lt;/span&gt;,x,y);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;text - 需要绘制的文本&lt;br&gt;x - 文本的x坐标&lt;br&gt;y - 文本的y坐标&lt;/p&gt;
&lt;p&gt;但是文本本身有宽度高度，所以要精确定位文本仅仅知道坐标还不行，还得知道坐标对应于文本本身的哪个点。&lt;br&gt;用Flash的概念来说，就是我们还需要知道文本的注册点在哪里。&lt;/p&gt;
&lt;p&gt;canvas中有两个属性来设置文本的注册点：&lt;strong&gt;textAlign&lt;/strong&gt;和&lt;strong&gt;textBaseline&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="重学JS" scheme="https://ywxgod.github.io/blog/categories/%E9%87%8D%E5%AD%A6JS/"/>
    
    
      <category term="canvas" scheme="https://ywxgod.github.io/blog/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>Canvas大小的设定</title>
    <link href="https://ywxgod.github.io/blog/2019/08/19/canvas/canvas_size_intro/"/>
    <id>https://ywxgod.github.io/blog/2019/08/19/canvas/canvas_size_intro/</id>
    <published>2019-08-19T15:44:23.726Z</published>
    <updated>2019-08-19T15:44:23.726Z</updated>
    
    <content type="html"><![CDATA[<p>通常设置canvas大小有两种方法:</p><ol><li>通过css设置width与height</li><li>通过canvas标签的属性width与height设置</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.canvas</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"150"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><p>两种方法的区别：<br><a id="more"></a></p><ol><li>通过css设置时值需要带上单位，如px；通过属性设置时不需要单位，只要一个非负整数。</li><li>通过css设置大小时，只设置了canvas元素(HTMLCanvasElement)的大小；通过属性设置时同时设置了canvas元素的大小和canvas绘图表面的大小。</li><li>当两种方法设置的大小不相同时，浏览器会将绘图表面大小缩放到canvas元素的大小。</li></ol><p>同样的绘制代码，设置canvas大小不同，效果不一样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">context.font = <span class="string">'20px sans-serif'</span>;</span><br><span class="line">context.textAlign = <span class="string">'start'</span>;</span><br><span class="line">context.textBaseline = <span class="string">'top'</span>;</span><br><span class="line">context.strokeStyle = <span class="string">'blue'</span>;</span><br><span class="line">context.strokeText(<span class="string">'What can I do for you?'</span>, <span class="number">0</span>,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><img src="/blog/css/images/canvas_size_prop.png" alt="未通过css设置大小时的效果"></p><p><img src="/blog/css/images/canvas_size_css.png" alt="通过css设置大小，且与canvas属性设置的大小不一样时的效果"></p><p>第二图，canvas属性设置为(300,150),css设置为(600,300)。<br>所以绘图表面比元素小，此时浏览器将绘图表面拉伸到了canvas元素的大小，文本看上去被放大了。</p><p>由于上面的区别，所以鼠标在canvas上点击时，要获取鼠标相对于canvas左上角的坐标，需要考虑这个放大系数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">canvas.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> bbox = canvas.getBoundingClientRect();</span><br><span class="line">    <span class="keyword">let</span> x = e.clientX - bbox.left*(canvas.width/bbox.width);</span><br><span class="line">    <span class="keyword">let</span> y = e.clientY - bbox.top*(canvas.height/bbox.height);</span><br><span class="line">    <span class="keyword">return</span> &#123;x,y&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常设置canvas大小有两种方法:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过css设置width与height&lt;/li&gt;
&lt;li&gt;通过canvas标签的属性width与height设置&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.canvas&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;600px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;300px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;300&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;150&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;两种方法的区别：&lt;br&gt;
    
    </summary>
    
      <category term="重学JS" scheme="https://ywxgod.github.io/blog/categories/%E9%87%8D%E5%AD%A6JS/"/>
    
    
      <category term="canvas" scheme="https://ywxgod.github.io/blog/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>Canvas的键盘事件</title>
    <link href="https://ywxgod.github.io/blog/2019/08/19/canvas/canvas_keyboard_events/"/>
    <id>https://ywxgod.github.io/blog/2019/08/19/canvas/canvas_keyboard_events/</id>
    <published>2019-08-19T15:44:23.725Z</published>
    <updated>2019-08-19T15:44:23.725Z</updated>
    
    <content type="html"><![CDATA[<p><strong>canvas是不可获取焦点的，所以无法用canvas监听键盘事件。如果要监听键盘事件，需要用document或者window对象来监听。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'keydown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'keydown'</span>,e);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'keyup'</span>,e);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'keypress'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'keypress'</span>,e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果按下的时可见字符，keypress事件会在keydown与keyup事件之间触发，否则不会触发。<br>如果按下某个可见字符持续一段时间，浏览器(谷歌)会循环触发keydown，keypress事件，直到松开按键触发一次keyup事件。</p><p><strong>要想知道按下的是哪个键，一般可以从传给事件处理函数的事件对象中获取。</strong></p><p>对于keydown，keyup事件，其事件对象的keyCode属性一般会保存按下的可见字符的ASCII码，如果是不可见字符，可以读取altKey，ctrlKey，metaKey，shiftKey这些属性来判断。<br>对于keypress事件，一定可以用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.fromCharCode(event.which)</span><br></pre></td></tr></table></figure><p>获取当前按下的字符。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;canvas是不可获取焦点的，所以无法用canvas监听键盘事件。如果要监听键盘事件，需要用document或者window对象来监听。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
      <category term="重学JS" scheme="https://ywxgod.github.io/blog/categories/%E9%87%8D%E5%AD%A6JS/"/>
    
    
      <category term="canvas" scheme="https://ywxgod.github.io/blog/tags/canvas/"/>
    
  </entry>
  
</feed>
